
build/debug/Practical_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002494  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002658  08002658  00003658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026c0  080026c0  00004c44  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080026c0  080026c0  000036c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080026c8  080026c8  00004c44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026c8  080026c8  000036c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080026cc  080026cc  000036cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000c44  20000000  080026d0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000c44  08003314  00004c44  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d5c  08003314  00004d5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004c44  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  00004c74  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d53f  00000000  00000000  00004cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f5f  00000000  00000000  000121ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000786b  00000000  00000000  0001414b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b08  00000000  00000000  0001b9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000008c8  00000000  00000000  0001c4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c766  00000000  00000000  0001cd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004068  00000000  00000000  000294ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001be0  00000000  00000000  0002d558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000194  00000000  00000000  0002f138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b80c 	b.w	80001f4 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f002 f8b0 	bl	8002348 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_idiv0>:
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000c44 	.word	0x20000c44
 8000214:	00000000 	.word	0x00000000
 8000218:	08002640 	.word	0x08002640

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000c48 	.word	0x20000c48
 8000234:	08002640 	.word	0x08002640

08000238 <delay>:
//====================================================================
// DESCRIPTION: A delay used by the LCD functions.
//====================================================================

void delay(unsigned int microseconds)
{
 8000238:	b082      	sub	sp, #8
	  volatile unsigned int counter;
	  microseconds *= 3;
 800023a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	  for(counter = 0; counter<microseconds; counter++)
 800023e:	2300      	movs	r3, #0
 8000240:	9301      	str	r3, [sp, #4]
 8000242:	e004      	b.n	800024e <delay+0x16>
	  {
	    __asm("nop");
 8000244:	bf00      	nop
	    __asm("nop");
 8000246:	bf00      	nop
	  for(counter = 0; counter<microseconds; counter++)
 8000248:	9b01      	ldr	r3, [sp, #4]
 800024a:	3301      	adds	r3, #1
 800024c:	9301      	str	r3, [sp, #4]
 800024e:	9b01      	ldr	r3, [sp, #4]
 8000250:	4283      	cmp	r3, r0
 8000252:	d3f7      	bcc.n	8000244 <delay+0xc>
	  }
}
 8000254:	b002      	add	sp, #8
 8000256:	4770      	bx	lr

08000258 <pulse_strobe>:
{
 8000258:	b510      	push	{r4, lr}
    delay(20);				// Delay
 800025a:	2014      	movs	r0, #20
 800025c:	f7ff ffec 	bl	8000238 <delay>
    GPIOC->BSRR |= LCD_EN_SET;		// pull E (PC15) HIGH
 8000260:	4c09      	ldr	r4, [pc, #36]	@ (8000288 <pulse_strobe+0x30>)
 8000262:	69a3      	ldr	r3, [r4, #24]
 8000264:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000268:	61a3      	str	r3, [r4, #24]
    delay(20);				// Delay
 800026a:	2014      	movs	r0, #20
 800026c:	f7ff ffe4 	bl	8000238 <delay>
    GPIOC->BSRR |= LCD_EN_RESET;	// Take EN LOW
 8000270:	69a3      	ldr	r3, [r4, #24]
 8000272:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000276:	61a3      	str	r3, [r4, #24]
    delay(20);				// Delay
 8000278:	2014      	movs	r0, #20
 800027a:	f7ff ffdd 	bl	8000238 <delay>
    GPIOC->BSRR |= LCD_EN_SET;		// Take EN HIGH
 800027e:	69a3      	ldr	r3, [r4, #24]
 8000280:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000284:	61a3      	str	r3, [r4, #24]
}
 8000286:	bd10      	pop	{r4, pc}
 8000288:	40020800 	.word	0x40020800

0800028c <lcd_putchar>:
{
 800028c:	b510      	push	{r4, lr}
 800028e:	4604      	mov	r4, r0
	GPIOC->BSRR |= LCD_RS_SET;	// Register Select (RS) line HIGH (data sent will now be read as text);
 8000290:	4a3d      	ldr	r2, [pc, #244]	@ (8000388 <lcd_putchar+0xfc>)
 8000292:	6993      	ldr	r3, [r2, #24]
 8000294:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000298:	6193      	str	r3, [r2, #24]
        if ((character & 0x80) != 0) 	// Select bit 7 of command, if HIGH set Data line 7 (D7)
 800029a:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800029e:	d141      	bne.n	8000324 <lcd_putchar+0x98>
        	GPIOA->BSRR |= LCD_D7_RESET;
 80002a0:	4a3a      	ldr	r2, [pc, #232]	@ (800038c <lcd_putchar+0x100>)
 80002a2:	6993      	ldr	r3, [r2, #24]
 80002a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80002a8:	6193      	str	r3, [r2, #24]
        if ((character & 0x40) != 0)	// Select bit 6 of command, if HIGH set Data line 6 (D6)       
 80002aa:	f014 0f40 	tst.w	r4, #64	@ 0x40
 80002ae:	d040      	beq.n	8000332 <lcd_putchar+0xa6>
            GPIOA->BSRR |= LCD_D6_SET;
 80002b0:	4a36      	ldr	r2, [pc, #216]	@ (800038c <lcd_putchar+0x100>)
 80002b2:	6993      	ldr	r3, [r2, #24]
 80002b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80002b8:	6193      	str	r3, [r2, #24]
        if ((character & 0x20) != 0)	// Select bit 5 of command, if HIGH set Data line 5 (D5)
 80002ba:	f014 0f20 	tst.w	r4, #32
 80002be:	d03e      	beq.n	800033e <lcd_putchar+0xb2>
        	GPIOB->BSRR |= LCD_D5_SET;                 
 80002c0:	4a33      	ldr	r2, [pc, #204]	@ (8000390 <lcd_putchar+0x104>)
 80002c2:	6993      	ldr	r3, [r2, #24]
 80002c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002c8:	6193      	str	r3, [r2, #24]
        if ((character & 0x10) != 0)	// Select bit 4 of command, if HIGH set Data line 4 (D4) 
 80002ca:	f014 0f10 	tst.w	r4, #16
 80002ce:	d03c      	beq.n	800034a <lcd_putchar+0xbe>
        	GPIOB->BSRR |= LCD_D4_SET;
 80002d0:	4a2f      	ldr	r2, [pc, #188]	@ (8000390 <lcd_putchar+0x104>)
 80002d2:	6993      	ldr	r3, [r2, #24]
 80002d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002d8:	6193      	str	r3, [r2, #24]
        pulse_strobe ();		// Send data
 80002da:	f7ff ffbd 	bl	8000258 <pulse_strobe>
        if ((character & 0x08) != 0)	// Select bit 3 of command, if HIGH set Data line 7 (D7) 
 80002de:	f014 0f08 	tst.w	r4, #8
 80002e2:	d038      	beq.n	8000356 <lcd_putchar+0xca>
        	GPIOA->BSRR |= LCD_D7_SET;
 80002e4:	4a29      	ldr	r2, [pc, #164]	@ (800038c <lcd_putchar+0x100>)
 80002e6:	6993      	ldr	r3, [r2, #24]
 80002e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80002ec:	6193      	str	r3, [r2, #24]
        if ((character & 0x04) != 0)	// Select bit 2 of command, if HIGH set Data line 6 (D6)         
 80002ee:	f014 0f04 	tst.w	r4, #4
 80002f2:	d036      	beq.n	8000362 <lcd_putchar+0xd6>
            GPIOA->BSRR |= LCD_D6_SET;
 80002f4:	4a25      	ldr	r2, [pc, #148]	@ (800038c <lcd_putchar+0x100>)
 80002f6:	6993      	ldr	r3, [r2, #24]
 80002f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80002fc:	6193      	str	r3, [r2, #24]
        if ((character & 0x02) != 0)	// Select bit 1 of command, if HIGH set Data line 5 (D5)  
 80002fe:	f014 0f02 	tst.w	r4, #2
 8000302:	d034      	beq.n	800036e <lcd_putchar+0xe2>
        	GPIOB->BSRR |= LCD_D5_SET;       
 8000304:	4a22      	ldr	r2, [pc, #136]	@ (8000390 <lcd_putchar+0x104>)
 8000306:	6993      	ldr	r3, [r2, #24]
 8000308:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800030c:	6193      	str	r3, [r2, #24]
        if ((character & 0x01) != 0)	// Select bit 0 of command, if HIGH set Data line 4 (D4)
 800030e:	f014 0f01 	tst.w	r4, #1
 8000312:	d032      	beq.n	800037a <lcd_putchar+0xee>
        	GPIOB->BSRR |= LCD_D4_SET;
 8000314:	4a1e      	ldr	r2, [pc, #120]	@ (8000390 <lcd_putchar+0x104>)
 8000316:	6993      	ldr	r3, [r2, #24]
 8000318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800031c:	6193      	str	r3, [r2, #24]
        pulse_strobe();			// Send data
 800031e:	f7ff ff9b 	bl	8000258 <pulse_strobe>
}
 8000322:	bd10      	pop	{r4, pc}
        	GPIOA->BSRR |= LCD_D7_SET;
 8000324:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 8000328:	6993      	ldr	r3, [r2, #24]
 800032a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	e7bb      	b.n	80002aa <lcd_putchar+0x1e>
            GPIOA->BSRR |= LCD_D6_RESET;
 8000332:	4a16      	ldr	r2, [pc, #88]	@ (800038c <lcd_putchar+0x100>)
 8000334:	6993      	ldr	r3, [r2, #24]
 8000336:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	e7bd      	b.n	80002ba <lcd_putchar+0x2e>
        	GPIOB->BSRR |= LCD_D5_RESET;
 800033e:	4a14      	ldr	r2, [pc, #80]	@ (8000390 <lcd_putchar+0x104>)
 8000340:	6993      	ldr	r3, [r2, #24]
 8000342:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	e7bf      	b.n	80002ca <lcd_putchar+0x3e>
        	GPIOB->BSRR |= LCD_D4_RESET;
 800034a:	4a11      	ldr	r2, [pc, #68]	@ (8000390 <lcd_putchar+0x104>)
 800034c:	6993      	ldr	r3, [r2, #24]
 800034e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	e7c1      	b.n	80002da <lcd_putchar+0x4e>
        	GPIOA->BSRR |= LCD_D7_RESET;
 8000356:	4a0d      	ldr	r2, [pc, #52]	@ (800038c <lcd_putchar+0x100>)
 8000358:	6993      	ldr	r3, [r2, #24]
 800035a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	e7c5      	b.n	80002ee <lcd_putchar+0x62>
            GPIOA->BSRR |= LCD_D6_RESET;
 8000362:	4a0a      	ldr	r2, [pc, #40]	@ (800038c <lcd_putchar+0x100>)
 8000364:	6993      	ldr	r3, [r2, #24]
 8000366:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	e7c7      	b.n	80002fe <lcd_putchar+0x72>
        	GPIOB->BSRR |= LCD_D5_RESET;
 800036e:	4a08      	ldr	r2, [pc, #32]	@ (8000390 <lcd_putchar+0x104>)
 8000370:	6993      	ldr	r3, [r2, #24]
 8000372:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	e7c9      	b.n	800030e <lcd_putchar+0x82>
        	GPIOB->BSRR |= LCD_D4_RESET;
 800037a:	4a05      	ldr	r2, [pc, #20]	@ (8000390 <lcd_putchar+0x104>)
 800037c:	6993      	ldr	r3, [r2, #24]
 800037e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	e7cb      	b.n	800031e <lcd_putchar+0x92>
 8000386:	bf00      	nop
 8000388:	40020800 	.word	0x40020800
 800038c:	40020000 	.word	0x40020000
 8000390:	40020400 	.word	0x40020400

08000394 <lcd_putstring>:
{
 8000394:	b538      	push	{r3, r4, r5, lr}
 8000396:	4605      	mov	r5, r0
    unsigned char count = 0;
 8000398:	2400      	movs	r4, #0
    while (instring[count])		// Until the null terminator is reached
 800039a:	e003      	b.n	80003a4 <lcd_putstring+0x10>
    	lcd_putchar(instring[count]);	// Write each character to LCD
 800039c:	f7ff ff76 	bl	800028c <lcd_putchar>
	    count++;
 80003a0:	3401      	adds	r4, #1
 80003a2:	b2e4      	uxtb	r4, r4
    while (instring[count])		// Until the null terminator is reached
 80003a4:	5d28      	ldrb	r0, [r5, r4]
 80003a6:	2800      	cmp	r0, #0
 80003a8:	d1f8      	bne.n	800039c <lcd_putstring+0x8>
}
 80003aa:	bd38      	pop	{r3, r4, r5, pc}

080003ac <lcd_command>:
{
 80003ac:	b510      	push	{r4, lr}
 80003ae:	4604      	mov	r4, r0
    GPIOC->BSRR |= LCD_RS_RESET;	// Register Select (RS)line low (data sent will now be read as commands);
 80003b0:	4a3f      	ldr	r2, [pc, #252]	@ (80004b0 <lcd_command+0x104>)
 80003b2:	6993      	ldr	r3, [r2, #24]
 80003b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80003b8:	6193      	str	r3, [r2, #24]
    if ((command & 0x80) != 0)		// Select bit 7 of command, if HIGH set Data line 7 (D7) 
 80003ba:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80003be:	d145      	bne.n	800044c <lcd_command+0xa0>
    	GPIOA->BSRR |= LCD_D7_RESET;
 80003c0:	4a3c      	ldr	r2, [pc, #240]	@ (80004b4 <lcd_command+0x108>)
 80003c2:	6993      	ldr	r3, [r2, #24]
 80003c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80003c8:	6193      	str	r3, [r2, #24]
    if ((command & 0x40) != 0)		// Select bit 6 of command, if HIGH set Data line 6 (D6) 
 80003ca:	f014 0f40 	tst.w	r4, #64	@ 0x40
 80003ce:	d044      	beq.n	800045a <lcd_command+0xae>
        GPIOA->BSRR |= LCD_D6_SET;
 80003d0:	4a38      	ldr	r2, [pc, #224]	@ (80004b4 <lcd_command+0x108>)
 80003d2:	6993      	ldr	r3, [r2, #24]
 80003d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003d8:	6193      	str	r3, [r2, #24]
    if ((command & 0x20) != 0)		// Select bit 5 of command, if HIGH set Data line 5 (D5)
 80003da:	f014 0f20 	tst.w	r4, #32
 80003de:	d042      	beq.n	8000466 <lcd_command+0xba>
    	GPIOB->BSRR |= LCD_D5_SET;	
 80003e0:	4a35      	ldr	r2, [pc, #212]	@ (80004b8 <lcd_command+0x10c>)
 80003e2:	6993      	ldr	r3, [r2, #24]
 80003e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003e8:	6193      	str	r3, [r2, #24]
    if ((command & 0x10) != 0)		// Select bit 4 of command, if HIGH set Data line 4 (D4)
 80003ea:	f014 0f10 	tst.w	r4, #16
 80003ee:	d040      	beq.n	8000472 <lcd_command+0xc6>
    	GPIOB->BSRR |= LCD_D4_SET;
 80003f0:	4a31      	ldr	r2, [pc, #196]	@ (80004b8 <lcd_command+0x10c>)
 80003f2:	6993      	ldr	r3, [r2, #24]
 80003f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003f8:	6193      	str	r3, [r2, #24]
    pulse_strobe ();			// Send data
 80003fa:	f7ff ff2d 	bl	8000258 <pulse_strobe>
    if ((command & 0x08) != 0)		// Select bit 3 of command, if HIGH set Data line 7 (D7) 
 80003fe:	f014 0f08 	tst.w	r4, #8
 8000402:	d03c      	beq.n	800047e <lcd_command+0xd2>
    	GPIOA->BSRR |= LCD_D7_SET;
 8000404:	4a2b      	ldr	r2, [pc, #172]	@ (80004b4 <lcd_command+0x108>)
 8000406:	6993      	ldr	r3, [r2, #24]
 8000408:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800040c:	6193      	str	r3, [r2, #24]
    if ((command & 0x04) != 0)		// Select bit 2 of command, if HIGH set Data line 6 (D6)
 800040e:	f014 0f04 	tst.w	r4, #4
 8000412:	d03a      	beq.n	800048a <lcd_command+0xde>
        GPIOA->BSRR |= LCD_D6_SET;
 8000414:	4a27      	ldr	r2, [pc, #156]	@ (80004b4 <lcd_command+0x108>)
 8000416:	6993      	ldr	r3, [r2, #24]
 8000418:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800041c:	6193      	str	r3, [r2, #24]
    if ((command & 0x02) != 0)		// Select bit 1 of command, if HIGH set Data line 5 (D5)
 800041e:	f014 0f02 	tst.w	r4, #2
 8000422:	d038      	beq.n	8000496 <lcd_command+0xea>
    	GPIOB->BSRR |= LCD_D5_SET;         
 8000424:	4a24      	ldr	r2, [pc, #144]	@ (80004b8 <lcd_command+0x10c>)
 8000426:	6993      	ldr	r3, [r2, #24]
 8000428:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800042c:	6193      	str	r3, [r2, #24]
    if ((command & 0x01) != 0)		// Select bit 0 of command, if HIGH set Data line 4 (D4)
 800042e:	f014 0f01 	tst.w	r4, #1
 8000432:	d036      	beq.n	80004a2 <lcd_command+0xf6>
    	GPIOB->BSRR |= LCD_D4_SET;
 8000434:	4a20      	ldr	r2, [pc, #128]	@ (80004b8 <lcd_command+0x10c>)
 8000436:	6993      	ldr	r3, [r2, #24]
 8000438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800043c:	6193      	str	r3, [r2, #24]
    pulse_strobe();			// Send data
 800043e:	f7ff ff0b 	bl	8000258 <pulse_strobe>
    delay(3000);
 8000442:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000446:	f7ff fef7 	bl	8000238 <delay>
}
 800044a:	bd10      	pop	{r4, pc}
    	GPIOA->BSRR |= LCD_D7_SET;
 800044c:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 8000450:	6993      	ldr	r3, [r2, #24]
 8000452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	e7b7      	b.n	80003ca <lcd_command+0x1e>
        GPIOA->BSRR |= LCD_D6_RESET;
 800045a:	4a16      	ldr	r2, [pc, #88]	@ (80004b4 <lcd_command+0x108>)
 800045c:	6993      	ldr	r3, [r2, #24]
 800045e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	e7b9      	b.n	80003da <lcd_command+0x2e>
    	GPIOB->BSRR |= LCD_D5_RESET;
 8000466:	4a14      	ldr	r2, [pc, #80]	@ (80004b8 <lcd_command+0x10c>)
 8000468:	6993      	ldr	r3, [r2, #24]
 800046a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	e7bb      	b.n	80003ea <lcd_command+0x3e>
    	GPIOB->BSRR |= LCD_D4_RESET;
 8000472:	4a11      	ldr	r2, [pc, #68]	@ (80004b8 <lcd_command+0x10c>)
 8000474:	6993      	ldr	r3, [r2, #24]
 8000476:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	e7bd      	b.n	80003fa <lcd_command+0x4e>
    	GPIOA->BSRR |= LCD_D7_RESET;
 800047e:	4a0d      	ldr	r2, [pc, #52]	@ (80004b4 <lcd_command+0x108>)
 8000480:	6993      	ldr	r3, [r2, #24]
 8000482:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000486:	6193      	str	r3, [r2, #24]
 8000488:	e7c1      	b.n	800040e <lcd_command+0x62>
        GPIOA->BSRR |= LCD_D6_RESET;
 800048a:	4a0a      	ldr	r2, [pc, #40]	@ (80004b4 <lcd_command+0x108>)
 800048c:	6993      	ldr	r3, [r2, #24]
 800048e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	e7c3      	b.n	800041e <lcd_command+0x72>
    	GPIOB->BSRR |= LCD_D5_RESET;
 8000496:	4a08      	ldr	r2, [pc, #32]	@ (80004b8 <lcd_command+0x10c>)
 8000498:	6993      	ldr	r3, [r2, #24]
 800049a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	e7c5      	b.n	800042e <lcd_command+0x82>
    	GPIOB->BSRR |= LCD_D4_RESET;
 80004a2:	4a05      	ldr	r2, [pc, #20]	@ (80004b8 <lcd_command+0x10c>)
 80004a4:	6993      	ldr	r3, [r2, #24]
 80004a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	e7c7      	b.n	800043e <lcd_command+0x92>
 80004ae:	bf00      	nop
 80004b0:	40020800 	.word	0x40020800
 80004b4:	40020000 	.word	0x40020000
 80004b8:	40020400 	.word	0x40020400

080004bc <init_LCD>:
{
 80004bc:	b508      	push	{r3, lr}
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80004be:	4b19      	ldr	r3, [pc, #100]	@ (8000524 <init_LCD+0x68>)
 80004c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004c2:	f042 0201 	orr.w	r2, r2, #1
 80004c6:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80004c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004ca:	f042 0202 	orr.w	r2, r2, #2
 80004ce:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80004d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004d2:	f042 0204 	orr.w	r2, r2, #4
 80004d6:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIOA->MODER |= (GPIO_MODER_MODER12_0|GPIO_MODER_MODER15_0); // D6 and D7
 80004d8:	4a13      	ldr	r2, [pc, #76]	@ (8000528 <init_LCD+0x6c>)
 80004da:	6813      	ldr	r3, [r2, #0]
 80004dc:	f043 4382 	orr.w	r3, r3, #1090519040	@ 0x41000000
 80004e0:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (GPIO_MODER_MODER8_0|GPIO_MODER_MODER9_0);   // D4 and D5
 80004e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80004e6:	6813      	ldr	r3, [r2, #0]
 80004e8:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 80004ec:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (GPIO_MODER_MODER14_0|GPIO_MODER_MODER15_0); // RS and EN
 80004ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80004f2:	6813      	ldr	r3, [r2, #0]
 80004f4:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 80004f8:	6013      	str	r3, [r2, #0]
    delay(30000);			// Allow the LCD some power up time (~30ms)
 80004fa:	f247 5030 	movw	r0, #30000	@ 0x7530
 80004fe:	f7ff fe9b 	bl	8000238 <delay>
    lcd_command(POWER_UP);		// Power up initialization for the lcd
 8000502:	2033      	movs	r0, #51	@ 0x33
 8000504:	f7ff ff52 	bl	80003ac <lcd_command>
    lcd_command(FOURBIT_MODE);		// Set LCD into 4 bit mode
 8000508:	2032      	movs	r0, #50	@ 0x32
 800050a:	f7ff ff4f 	bl	80003ac <lcd_command>
    lcd_command(DISPLAY_ON);		// Turn display on and set up cursor
 800050e:	200c      	movs	r0, #12
 8000510:	f7ff ff4c 	bl	80003ac <lcd_command>
    lcd_command(TWOLINE_MODE);		// Set up 2 lines and character size
 8000514:	2028      	movs	r0, #40	@ 0x28
 8000516:	f7ff ff49 	bl	80003ac <lcd_command>
    lcd_command(CLEAR);			// Clear display
 800051a:	2001      	movs	r0, #1
 800051c:	f7ff ff46 	bl	80003ac <lcd_command>
}
 8000520:	bd08      	pop	{r3, pc}
 8000522:	bf00      	nop
 8000524:	40023800 	.word	0x40023800
 8000528:	40020000 	.word	0x40020000

0800052c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800052c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000530:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000532:	ad03      	add	r5, sp, #12
 8000534:	2400      	movs	r4, #0
 8000536:	9403      	str	r4, [sp, #12]
 8000538:	9404      	str	r4, [sp, #16]
 800053a:	9405      	str	r4, [sp, #20]
 800053c:	9406      	str	r4, [sp, #24]
 800053e:	9407      	str	r4, [sp, #28]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000540:	9400      	str	r4, [sp, #0]
 8000542:	4b2f      	ldr	r3, [pc, #188]	@ (8000600 <MX_GPIO_Init+0xd4>)
 8000544:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000546:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800054a:	631a      	str	r2, [r3, #48]	@ 0x30
 800054c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800054e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000552:	9200      	str	r2, [sp, #0]
 8000554:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	9401      	str	r4, [sp, #4]
 8000558:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800055a:	f042 0201 	orr.w	r2, r2, #1
 800055e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000560:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000562:	f002 0201 	and.w	r2, r2, #1
 8000566:	9201      	str	r2, [sp, #4]
 8000568:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056a:	9402      	str	r4, [sp, #8]
 800056c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800056e:	f042 0202 	orr.w	r2, r2, #2
 8000572:	631a      	str	r2, [r3, #48]	@ 0x30
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	f003 0302 	and.w	r3, r3, #2
 800057a:	9302      	str	r3, [sp, #8]
 800057c:	9b02      	ldr	r3, [sp, #8]

  // -------------------------------
  // LCD pins configuration
  // -------------------------------
  // Configure PC14 (RS) and PC15 (E) as output push-pull
  GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_15;
 800057e:	f44f 4b40 	mov.w	fp, #49152	@ 0xc000
 8000582:	f8cd b00c 	str.w	fp, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000586:	2701      	movs	r7, #1
 8000588:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800058a:	f8df a080 	ldr.w	sl, [pc, #128]	@ 800060c <MX_GPIO_Init+0xe0>
 800058e:	4629      	mov	r1, r5
 8000590:	4650      	mov	r0, sl
 8000592:	f000 fcfd 	bl	8000f90 <HAL_GPIO_Init>

  // Configure PB8 (D4) and PB9 (D5) as output push-pull
  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000596:	f44f 7940 	mov.w	r9, #768	@ 0x300
 800059a:	f8cd 900c 	str.w	r9, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800059e:	4629      	mov	r1, r5
 80005a0:	4818      	ldr	r0, [pc, #96]	@ (8000604 <MX_GPIO_Init+0xd8>)
 80005a2:	f000 fcf5 	bl	8000f90 <HAL_GPIO_Init>

  // Configure PA12 (D6) and PA15 (D7) as output push-pull
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_15;
 80005a6:	f44f 4810 	mov.w	r8, #36864	@ 0x9000
 80005aa:	f8cd 800c 	str.w	r8, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ae:	4e16      	ldr	r6, [pc, #88]	@ (8000608 <MX_GPIO_Init+0xdc>)
 80005b0:	4629      	mov	r1, r5
 80005b2:	4630      	mov	r0, r6
 80005b4:	f000 fcec 	bl	8000f90 <HAL_GPIO_Init>

  // Set all LCD pins LOW initially
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 80005b8:	4622      	mov	r2, r4
 80005ba:	4659      	mov	r1, fp
 80005bc:	4650      	mov	r0, sl
 80005be:	f000 fdd7 	bl	8001170 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 80005c2:	4622      	mov	r2, r4
 80005c4:	4649      	mov	r1, r9
 80005c6:	480f      	ldr	r0, [pc, #60]	@ (8000604 <MX_GPIO_Init+0xd8>)
 80005c8:	f000 fdd2 	bl	8001170 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12 | GPIO_PIN_15, GPIO_PIN_RESET);
 80005cc:	4622      	mov	r2, r4
 80005ce:	4641      	mov	r1, r8
 80005d0:	4630      	mov	r0, r6
 80005d2:	f000 fdcd 	bl	8001170 <HAL_GPIO_WritePin>


  // -------------------------------
  // Button0 configuration (PA0)
  // -------------------------------
  GPIO_InitStruct.Pin = Button0_Pin;
 80005d6:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; // Interrupt on rising edge
 80005d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005dc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;         // Use pull-up resistor
 80005de:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e0:	4629      	mov	r1, r5
 80005e2:	4630      	mov	r0, r6
 80005e4:	f000 fcd4 	bl	8000f90 <HAL_GPIO_Init>

  // Enable and set EXTI line 0 interrupt priority
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 80005e8:	4622      	mov	r2, r4
 80005ea:	2102      	movs	r1, #2
 80005ec:	2006      	movs	r0, #6
 80005ee:	f000 fa91 	bl	8000b14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005f2:	2006      	movs	r0, #6
 80005f4:	f000 fa9e 	bl	8000b34 <HAL_NVIC_EnableIRQ>

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005f8:	b009      	add	sp, #36	@ 0x24
 80005fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40020400 	.word	0x40020400
 8000608:	40020000 	.word	0x40020000
 800060c:	40020800 	.word	0x40020800

08000610 <MX_DMA_Init>:
{
 8000610:	b500      	push	{lr}
 8000612:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000614:	2100      	movs	r1, #0
 8000616:	9101      	str	r1, [sp, #4]
 8000618:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <MX_DMA_Init+0x30>)
 800061a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800061c:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000620:	631a      	str	r2, [r3, #48]	@ 0x30
 8000622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000624:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800062c:	460a      	mov	r2, r1
 800062e:	2010      	movs	r0, #16
 8000630:	f000 fa70 	bl	8000b14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000634:	2010      	movs	r0, #16
 8000636:	f000 fa7d 	bl	8000b34 <HAL_NVIC_EnableIRQ>
}
 800063a:	b003      	add	sp, #12
 800063c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000640:	40023800 	.word	0x40023800

08000644 <EXTI0_IRQHandler>:
    "Sine", "Sawtooth", "Triangle", "Piano", "Guitar", "Drum"
};


/* USER CODE BEGIN 4 */
void EXTI0_IRQHandler(void){
 8000644:	b570      	push	{r4, r5, r6, lr}

	// TODO: Debounce using HAL_GetTick()
	// TODO: Disable DMA transfer and abort IT, then start DMA in IT mode with new LUT and re-enable transfer
	// HINT: Consider using C's "switch" function to handle LUT changes
HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0); // Clear interrupt
 8000646:	2001      	movs	r0, #1
 8000648:	f000 fd9a 	bl	8001180 <HAL_GPIO_EXTI_IRQHandler>

    uint32_t tick = HAL_GetTick();
 800064c:	f000 fa08 	bl	8000a60 <HAL_GetTick>
    if ((tick - lastDebounceTick) > DEBOUNCE_DELAY)
 8000650:	4b22      	ldr	r3, [pc, #136]	@ (80006dc <EXTI0_IRQHandler+0x98>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	1ac3      	subs	r3, r0, r3
 8000656:	2bc8      	cmp	r3, #200	@ 0xc8
 8000658:	d800      	bhi.n	800065c <EXTI0_IRQHandler+0x18>
        lcd_command(CURSOR_HOME);
        lcd_putstring("Waveform:");
        lcd_command(LINE_TWO);
        lcd_putstring((char*)waveNames[currentWave]);
    }
}
 800065a:	bd70      	pop	{r4, r5, r6, pc}
        lastDebounceTick = tick;
 800065c:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <EXTI0_IRQHandler+0x98>)
 800065e:	6018      	str	r0, [r3, #0]
        __HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
 8000660:	4d1f      	ldr	r5, [pc, #124]	@ (80006e0 <EXTI0_IRQHandler+0x9c>)
 8000662:	682a      	ldr	r2, [r5, #0]
 8000664:	68d3      	ldr	r3, [r2, #12]
 8000666:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800066a:	60d3      	str	r3, [r2, #12]
        HAL_DMA_Abort_IT(&hdma_tim2_ch1);
 800066c:	4e1d      	ldr	r6, [pc, #116]	@ (80006e4 <EXTI0_IRQHandler+0xa0>)
 800066e:	4630      	mov	r0, r6
 8000670:	f000 fb8e 	bl	8000d90 <HAL_DMA_Abort_IT>
        currentWave = (currentWave + 1) % WAVE_COUNT;
 8000674:	4c1c      	ldr	r4, [pc, #112]	@ (80006e8 <EXTI0_IRQHandler+0xa4>)
 8000676:	7823      	ldrb	r3, [r4, #0]
 8000678:	3301      	adds	r3, #1
 800067a:	4a1c      	ldr	r2, [pc, #112]	@ (80006ec <EXTI0_IRQHandler+0xa8>)
 800067c:	fb82 1203 	smull	r1, r2, r2, r3
 8000680:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000684:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8000688:	b2db      	uxtb	r3, r3
 800068a:	7023      	strb	r3, [r4, #0]
      HAL_DMA_Start_IT(&hdma_tim2_ch1,(uint32_t)waveforms[currentWave],DestAddress, NS);
 800068c:	7820      	ldrb	r0, [r4, #0]
 800068e:	2380      	movs	r3, #128	@ 0x80
 8000690:	4a17      	ldr	r2, [pc, #92]	@ (80006f0 <EXTI0_IRQHandler+0xac>)
 8000692:	6812      	ldr	r2, [r2, #0]
 8000694:	4917      	ldr	r1, [pc, #92]	@ (80006f4 <EXTI0_IRQHandler+0xb0>)
 8000696:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800069a:	4630      	mov	r0, r6
 800069c:	f000 fb44 	bl	8000d28 <HAL_DMA_Start_IT>
        __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 80006a0:	682a      	ldr	r2, [r5, #0]
 80006a2:	68d3      	ldr	r3, [r2, #12]
 80006a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006a8:	60d3      	str	r3, [r2, #12]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2120      	movs	r1, #32
 80006ae:	4812      	ldr	r0, [pc, #72]	@ (80006f8 <EXTI0_IRQHandler+0xb4>)
 80006b0:	f000 fd5e 	bl	8001170 <HAL_GPIO_WritePin>
        lcd_command(CLEAR);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f7ff fe79 	bl	80003ac <lcd_command>
        lcd_command(CURSOR_HOME);
 80006ba:	2002      	movs	r0, #2
 80006bc:	f7ff fe76 	bl	80003ac <lcd_command>
        lcd_putstring("Waveform:");
 80006c0:	480e      	ldr	r0, [pc, #56]	@ (80006fc <EXTI0_IRQHandler+0xb8>)
 80006c2:	f7ff fe67 	bl	8000394 <lcd_putstring>
        lcd_command(LINE_TWO);
 80006c6:	20c0      	movs	r0, #192	@ 0xc0
 80006c8:	f7ff fe70 	bl	80003ac <lcd_command>
        lcd_putstring((char*)waveNames[currentWave]);
 80006cc:	7822      	ldrb	r2, [r4, #0]
 80006ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <EXTI0_IRQHandler+0xbc>)
 80006d0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80006d4:	f7ff fe5e 	bl	8000394 <lcd_putstring>
}
 80006d8:	e7bf      	b.n	800065a <EXTI0_IRQHandler+0x16>
 80006da:	bf00      	nop
 80006dc:	20000c64 	.word	0x20000c64
 80006e0:	20000d10 	.word	0x20000d10
 80006e4:	20000c68 	.word	0x20000c68
 80006e8:	20000c60 	.word	0x20000c60
 80006ec:	2aaaaaab 	.word	0x2aaaaaab
 80006f0:	20000030 	.word	0x20000030
 80006f4:	20000018 	.word	0x20000018
 80006f8:	40020000 	.word	0x40020000
 80006fc:	08002658 	.word	0x08002658
 8000700:	20000000 	.word	0x20000000

08000704 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000704:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000706:	e7fe      	b.n	8000706 <Error_Handler+0x2>

08000708 <MX_TIM2_Init>:
{
 8000708:	b500      	push	{lr}
 800070a:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800070c:	2300      	movs	r3, #0
 800070e:	930a      	str	r3, [sp, #40]	@ 0x28
 8000710:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000712:	930c      	str	r3, [sp, #48]	@ 0x30
 8000714:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000716:	9308      	str	r3, [sp, #32]
 8000718:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800071a:	9301      	str	r3, [sp, #4]
 800071c:	9302      	str	r3, [sp, #8]
 800071e:	9303      	str	r3, [sp, #12]
 8000720:	9304      	str	r3, [sp, #16]
 8000722:	9305      	str	r3, [sp, #20]
 8000724:	9306      	str	r3, [sp, #24]
 8000726:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 8000728:	4837      	ldr	r0, [pc, #220]	@ (8000808 <MX_TIM2_Init+0x100>)
 800072a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800072e:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8000730:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000732:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = TIM2_Ticks - 1;
 8000734:	4a35      	ldr	r2, [pc, #212]	@ (800080c <MX_TIM2_Init+0x104>)
 8000736:	6812      	ldr	r2, [r2, #0]
 8000738:	3a01      	subs	r2, #1
 800073a:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073c:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000740:	f001 fa58 	bl	8001bf4 <HAL_TIM_Base_Init>
 8000744:	2800      	cmp	r0, #0
 8000746:	d153      	bne.n	80007f0 <MX_TIM2_Init+0xe8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000748:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800074c:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800074e:	a90a      	add	r1, sp, #40	@ 0x28
 8000750:	482d      	ldr	r0, [pc, #180]	@ (8000808 <MX_TIM2_Init+0x100>)
 8000752:	f001 fbb5 	bl	8001ec0 <HAL_TIM_ConfigClockSource>
 8000756:	2800      	cmp	r0, #0
 8000758:	d14c      	bne.n	80007f4 <MX_TIM2_Init+0xec>
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800075a:	482b      	ldr	r0, [pc, #172]	@ (8000808 <MX_TIM2_Init+0x100>)
 800075c:	f001 fa76 	bl	8001c4c <HAL_TIM_OC_Init>
 8000760:	2800      	cmp	r0, #0
 8000762:	d149      	bne.n	80007f8 <MX_TIM2_Init+0xf0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000764:	2300      	movs	r3, #0
 8000766:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000768:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800076a:	a908      	add	r1, sp, #32
 800076c:	4826      	ldr	r0, [pc, #152]	@ (8000808 <MX_TIM2_Init+0x100>)
 800076e:	f001 fd31 	bl	80021d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000772:	2800      	cmp	r0, #0
 8000774:	d142      	bne.n	80007fc <MX_TIM2_Init+0xf4>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000776:	2200      	movs	r2, #0
 8000778:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = TIM2_Ticks - 1;
 800077a:	4b24      	ldr	r3, [pc, #144]	@ (800080c <MX_TIM2_Init+0x104>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000782:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000784:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000786:	a901      	add	r1, sp, #4
 8000788:	481f      	ldr	r0, [pc, #124]	@ (8000808 <MX_TIM2_Init+0x100>)
 800078a:	f001 faef 	bl	8001d6c <HAL_TIM_OC_ConfigChannel>
 800078e:	2800      	cmp	r0, #0
 8000790:	d136      	bne.n	8000800 <MX_TIM2_Init+0xf8>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	4a1e      	ldr	r2, [pc, #120]	@ (8000810 <MX_TIM2_Init+0x108>)
 8000798:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800079a:	f441 1100 	orr.w	r1, r1, #2097152	@ 0x200000
 800079e:	6311      	str	r1, [r2, #48]	@ 0x30
 80007a0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80007a2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80007a6:	9200      	str	r2, [sp, #0]
 80007a8:	9a00      	ldr	r2, [sp, #0]
  hdma_tim2_ch1.Instance = DMA1_Stream5;
 80007aa:	481a      	ldr	r0, [pc, #104]	@ (8000814 <MX_TIM2_Init+0x10c>)
 80007ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000818 <MX_TIM2_Init+0x110>)
 80007ae:	6002      	str	r2, [r0, #0]
  hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;         // TIM2_CH1 is on channel 3
 80007b0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80007b4:	6042      	str	r2, [r0, #4]
  hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH; // Memory -> TIM3->CCR3
 80007b6:	2240      	movs	r2, #64	@ 0x40
 80007b8:	6082      	str	r2, [r0, #8]
  hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;    // Peripheral address fixed
 80007ba:	60c3      	str	r3, [r0, #12]
  hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;        // Memory address increments
 80007bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007c0:	6102      	str	r2, [r0, #16]
  hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80007c6:	6142      	str	r2, [r0, #20]
  hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007c8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007cc:	6182      	str	r2, [r0, #24]
  hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;            // Repeat LUT automatically
 80007ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007d2:	61c2      	str	r2, [r0, #28]
  hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80007d4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80007d8:	6202      	str	r2, [r0, #32]
  hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007da:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80007dc:	f000 fa3e 	bl	8000c5c <HAL_DMA_Init>
 80007e0:	b980      	cbnz	r0, 8000804 <MX_TIM2_Init+0xfc>
  __HAL_LINKDMA(&htim2, hdma[TIM_DMA_ID_CC1], hdma_tim2_ch1);
 80007e2:	4a09      	ldr	r2, [pc, #36]	@ (8000808 <MX_TIM2_Init+0x100>)
 80007e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <MX_TIM2_Init+0x10c>)
 80007e6:	6253      	str	r3, [r2, #36]	@ 0x24
 80007e8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80007ea:	b00f      	add	sp, #60	@ 0x3c
 80007ec:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80007f0:	f7ff ff88 	bl	8000704 <Error_Handler>
    Error_Handler();
 80007f4:	f7ff ff86 	bl	8000704 <Error_Handler>
    Error_Handler();
 80007f8:	f7ff ff84 	bl	8000704 <Error_Handler>
    Error_Handler();
 80007fc:	f7ff ff82 	bl	8000704 <Error_Handler>
    Error_Handler();
 8000800:	f7ff ff80 	bl	8000704 <Error_Handler>
      Error_Handler();
 8000804:	f7ff ff7e 	bl	8000704 <Error_Handler>
 8000808:	20000d10 	.word	0x20000d10
 800080c:	20000034 	.word	0x20000034
 8000810:	40023800 	.word	0x40023800
 8000814:	20000c68 	.word	0x20000c68
 8000818:	40026088 	.word	0x40026088

0800081c <MX_TIM3_Init>:
{
 800081c:	b500      	push	{lr}
 800081e:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000820:	2300      	movs	r3, #0
 8000822:	930a      	str	r3, [sp, #40]	@ 0x28
 8000824:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000826:	930c      	str	r3, [sp, #48]	@ 0x30
 8000828:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082a:	9308      	str	r3, [sp, #32]
 800082c:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800082e:	9301      	str	r3, [sp, #4]
 8000830:	9302      	str	r3, [sp, #8]
 8000832:	9303      	str	r3, [sp, #12]
 8000834:	9304      	str	r3, [sp, #16]
 8000836:	9305      	str	r3, [sp, #20]
 8000838:	9306      	str	r3, [sp, #24]
 800083a:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 800083c:	481e      	ldr	r0, [pc, #120]	@ (80008b8 <MX_TIM3_Init+0x9c>)
 800083e:	4a1f      	ldr	r2, [pc, #124]	@ (80008bc <MX_TIM3_Init+0xa0>)
 8000840:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8000842:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000844:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 8000846:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800084a:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084c:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000850:	f001 f9d0 	bl	8001bf4 <HAL_TIM_Base_Init>
 8000854:	bb28      	cbnz	r0, 80008a2 <MX_TIM3_Init+0x86>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000856:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800085a:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800085c:	a90a      	add	r1, sp, #40	@ 0x28
 800085e:	4816      	ldr	r0, [pc, #88]	@ (80008b8 <MX_TIM3_Init+0x9c>)
 8000860:	f001 fb2e 	bl	8001ec0 <HAL_TIM_ConfigClockSource>
 8000864:	b9f8      	cbnz	r0, 80008a6 <MX_TIM3_Init+0x8a>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000866:	4814      	ldr	r0, [pc, #80]	@ (80008b8 <MX_TIM3_Init+0x9c>)
 8000868:	f001 fa1c 	bl	8001ca4 <HAL_TIM_PWM_Init>
 800086c:	b9e8      	cbnz	r0, 80008aa <MX_TIM3_Init+0x8e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086e:	2300      	movs	r3, #0
 8000870:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000872:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000874:	a908      	add	r1, sp, #32
 8000876:	4810      	ldr	r0, [pc, #64]	@ (80008b8 <MX_TIM3_Init+0x9c>)
 8000878:	f001 fcac 	bl	80021d4 <HAL_TIMEx_MasterConfigSynchronization>
 800087c:	b9b8      	cbnz	r0, 80008ae <MX_TIM3_Init+0x92>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800087e:	2360      	movs	r3, #96	@ 0x60
 8000880:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000886:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000888:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800088a:	2208      	movs	r2, #8
 800088c:	a901      	add	r1, sp, #4
 800088e:	480a      	ldr	r0, [pc, #40]	@ (80008b8 <MX_TIM3_Init+0x9c>)
 8000890:	f001 fa9b 	bl	8001dca <HAL_TIM_PWM_ConfigChannel>
 8000894:	b968      	cbnz	r0, 80008b2 <MX_TIM3_Init+0x96>
  HAL_TIM_MspPostInit(&htim3);
 8000896:	4808      	ldr	r0, [pc, #32]	@ (80008b8 <MX_TIM3_Init+0x9c>)
 8000898:	f000 fce8 	bl	800126c <HAL_TIM_MspPostInit>
}
 800089c:	b00f      	add	sp, #60	@ 0x3c
 800089e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80008a2:	f7ff ff2f 	bl	8000704 <Error_Handler>
    Error_Handler();
 80008a6:	f7ff ff2d 	bl	8000704 <Error_Handler>
    Error_Handler();
 80008aa:	f7ff ff2b 	bl	8000704 <Error_Handler>
    Error_Handler();
 80008ae:	f7ff ff29 	bl	8000704 <Error_Handler>
    Error_Handler();
 80008b2:	f7ff ff27 	bl	8000704 <Error_Handler>
 80008b6:	bf00      	nop
 80008b8:	20000cc8 	.word	0x20000cc8
 80008bc:	40000400 	.word	0x40000400

080008c0 <SystemClock_Config>:
{
 80008c0:	b510      	push	{r4, lr}
 80008c2:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c4:	ac07      	add	r4, sp, #28
 80008c6:	2234      	movs	r2, #52	@ 0x34
 80008c8:	2100      	movs	r1, #0
 80008ca:	4620      	mov	r0, r4
 80008cc:	f001 fd0f 	bl	80022ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	2300      	movs	r3, #0
 80008d2:	9302      	str	r3, [sp, #8]
 80008d4:	9303      	str	r3, [sp, #12]
 80008d6:	9304      	str	r3, [sp, #16]
 80008d8:	9305      	str	r3, [sp, #20]
 80008da:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	4a19      	ldr	r2, [pc, #100]	@ (8000944 <SystemClock_Config+0x84>)
 80008e0:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80008e2:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80008e6:	6411      	str	r1, [r2, #64]	@ 0x40
 80008e8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80008ea:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80008ee:	9200      	str	r2, [sp, #0]
 80008f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008f2:	9301      	str	r3, [sp, #4]
 80008f4:	4914      	ldr	r1, [pc, #80]	@ (8000948 <SystemClock_Config+0x88>)
 80008f6:	680a      	ldr	r2, [r1, #0]
 80008f8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80008fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000900:	600a      	str	r2, [r1, #0]
 8000902:	680a      	ldr	r2, [r1, #0]
 8000904:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000908:	9201      	str	r2, [sp, #4]
 800090a:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800090c:	2202      	movs	r2, #2
 800090e:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000910:	2201      	movs	r2, #1
 8000912:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000914:	2210      	movs	r2, #16
 8000916:	920b      	str	r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000918:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091a:	4620      	mov	r0, r4
 800091c:	f000 fe16 	bl	800154c <HAL_RCC_OscConfig>
 8000920:	b960      	cbnz	r0, 800093c <SystemClock_Config+0x7c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000922:	230f      	movs	r3, #15
 8000924:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000926:	2100      	movs	r1, #0
 8000928:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092a:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800092c:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092e:	9106      	str	r1, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000930:	a802      	add	r0, sp, #8
 8000932:	f000 fcc7 	bl	80012c4 <HAL_RCC_ClockConfig>
 8000936:	b918      	cbnz	r0, 8000940 <SystemClock_Config+0x80>
}
 8000938:	b014      	add	sp, #80	@ 0x50
 800093a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800093c:	f7ff fee2 	bl	8000704 <Error_Handler>
    Error_Handler();
 8000940:	f7ff fee0 	bl	8000704 <Error_Handler>
 8000944:	40023800 	.word	0x40023800
 8000948:	40007000 	.word	0x40007000

0800094c <main>:
{
 800094c:	b508      	push	{r3, lr}
  HAL_Init();
 800094e:	f000 f861 	bl	8000a14 <HAL_Init>
  SystemClock_Config();
 8000952:	f7ff ffb5 	bl	80008c0 <SystemClock_Config>
  MX_GPIO_Init();
 8000956:	f7ff fde9 	bl	800052c <MX_GPIO_Init>
  MX_DMA_Init();
 800095a:	f7ff fe59 	bl	8000610 <MX_DMA_Init>
  MX_TIM2_Init();
 800095e:	f7ff fed3 	bl	8000708 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000962:	f7ff ff5b 	bl	800081c <MX_TIM3_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000966:	2108      	movs	r1, #8
 8000968:	4811      	ldr	r0, [pc, #68]	@ (80009b0 <main+0x64>)
 800096a:	f001 fbb5 	bl	80020d8 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim2,TIM_CHANNEL_1);
 800096e:	4c11      	ldr	r4, [pc, #68]	@ (80009b4 <main+0x68>)
 8000970:	2100      	movs	r1, #0
 8000972:	4620      	mov	r0, r4
 8000974:	f001 fb32 	bl	8001fdc <HAL_TIM_OC_Start>
 HAL_DMA_Start_IT(&hdma_tim2_ch1, (uint32_t)Sin_LUT, DestAddress , NS);
 8000978:	2380      	movs	r3, #128	@ 0x80
 800097a:	4a0f      	ldr	r2, [pc, #60]	@ (80009b8 <main+0x6c>)
 800097c:	6812      	ldr	r2, [r2, #0]
 800097e:	490f      	ldr	r1, [pc, #60]	@ (80009bc <main+0x70>)
 8000980:	480f      	ldr	r0, [pc, #60]	@ (80009c0 <main+0x74>)
 8000982:	f000 f9d1 	bl	8000d28 <HAL_DMA_Start_IT>
 init_LCD();
 8000986:	f7ff fd99 	bl	80004bc <init_LCD>
  lcd_command(CLEAR);
 800098a:	2001      	movs	r0, #1
 800098c:	f7ff fd0e 	bl	80003ac <lcd_command>
  lcd_command(CURSOR_HOME);
 8000990:	2002      	movs	r0, #2
 8000992:	f7ff fd0b 	bl	80003ac <lcd_command>
  lcd_putstring("Waveform: ");
 8000996:	480b      	ldr	r0, [pc, #44]	@ (80009c4 <main+0x78>)
 8000998:	f7ff fcfc 	bl	8000394 <lcd_putstring>
  lcd_command(LINE_TWO);
 800099c:	20c0      	movs	r0, #192	@ 0xc0
 800099e:	f7ff fd05 	bl	80003ac <lcd_command>
__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 80009a2:	6822      	ldr	r2, [r4, #0]
 80009a4:	68d3      	ldr	r3, [r2, #12]
 80009a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009aa:	60d3      	str	r3, [r2, #12]
  while (1)
 80009ac:	e7fe      	b.n	80009ac <main+0x60>
 80009ae:	bf00      	nop
 80009b0:	20000cc8 	.word	0x20000cc8
 80009b4:	20000d10 	.word	0x20000d10
 80009b8:	20000030 	.word	0x20000030
 80009bc:	20000a38 	.word	0x20000a38
 80009c0:	20000c68 	.word	0x20000c68
 80009c4:	08002664 	.word	0x08002664

080009c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c8:	b510      	push	{r4, lr}
 80009ca:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <HAL_InitTick+0x40>)
 80009ce:	781a      	ldrb	r2, [r3, #0]
 80009d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80009d8:	4a0c      	ldr	r2, [pc, #48]	@ (8000a0c <HAL_InitTick+0x44>)
 80009da:	6810      	ldr	r0, [r2, #0]
 80009dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80009e0:	f000 f8ac 	bl	8000b3c <HAL_SYSTICK_Config>
 80009e4:	b968      	cbnz	r0, 8000a02 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e6:	2c0f      	cmp	r4, #15
 80009e8:	d901      	bls.n	80009ee <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80009ea:	2001      	movs	r0, #1
 80009ec:	e00a      	b.n	8000a04 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ee:	2200      	movs	r2, #0
 80009f0:	4621      	mov	r1, r4
 80009f2:	f04f 30ff 	mov.w	r0, #4294967295
 80009f6:	f000 f88d 	bl	8000b14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009fa:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <HAL_InitTick+0x48>)
 80009fc:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80009fe:	2000      	movs	r0, #0
 8000a00:	e000      	b.n	8000a04 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000a02:	2001      	movs	r0, #1
}
 8000a04:	bd10      	pop	{r4, pc}
 8000a06:	bf00      	nop
 8000a08:	20000c38 	.word	0x20000c38
 8000a0c:	20000c40 	.word	0x20000c40
 8000a10:	20000c3c 	.word	0x20000c3c

08000a14 <HAL_Init>:
{
 8000a14:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a16:	4b0b      	ldr	r3, [pc, #44]	@ (8000a44 <HAL_Init+0x30>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000a1e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000a26:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000a2e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a30:	2003      	movs	r0, #3
 8000a32:	f000 f85d 	bl	8000af0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a36:	200f      	movs	r0, #15
 8000a38:	f7ff ffc6 	bl	80009c8 <HAL_InitTick>
  HAL_MspInit();
 8000a3c:	f000 fbae 	bl	800119c <HAL_MspInit>
}
 8000a40:	2000      	movs	r0, #0
 8000a42:	bd08      	pop	{r3, pc}
 8000a44:	40023c00 	.word	0x40023c00

08000a48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a48:	4a03      	ldr	r2, [pc, #12]	@ (8000a58 <HAL_IncTick+0x10>)
 8000a4a:	6811      	ldr	r1, [r2, #0]
 8000a4c:	4b03      	ldr	r3, [pc, #12]	@ (8000a5c <HAL_IncTick+0x14>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	440b      	add	r3, r1
 8000a52:	6013      	str	r3, [r2, #0]
}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20000d58 	.word	0x20000d58
 8000a5c:	20000c38 	.word	0x20000c38

08000a60 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a60:	4b01      	ldr	r3, [pc, #4]	@ (8000a68 <HAL_GetTick+0x8>)
 8000a62:	6818      	ldr	r0, [r3, #0]
}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000d58 	.word	0x20000d58

08000a6c <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000a6c:	2800      	cmp	r0, #0
 8000a6e:	db07      	blt.n	8000a80 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a70:	f000 021f 	and.w	r2, r0, #31
 8000a74:	0940      	lsrs	r0, r0, #5
 8000a76:	2301      	movs	r3, #1
 8000a78:	4093      	lsls	r3, r2
 8000a7a:	4a02      	ldr	r2, [pc, #8]	@ (8000a84 <__NVIC_EnableIRQ+0x18>)
 8000a7c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000e100 	.word	0xe000e100

08000a88 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000a88:	2800      	cmp	r0, #0
 8000a8a:	db08      	blt.n	8000a9e <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8c:	0109      	lsls	r1, r1, #4
 8000a8e:	b2c9      	uxtb	r1, r1
 8000a90:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000a94:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000a98:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000a9c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9e:	f000 000f 	and.w	r0, r0, #15
 8000aa2:	0109      	lsls	r1, r1, #4
 8000aa4:	b2c9      	uxtb	r1, r1
 8000aa6:	4b01      	ldr	r3, [pc, #4]	@ (8000aac <__NVIC_SetPriority+0x24>)
 8000aa8:	5419      	strb	r1, [r3, r0]
  }
}
 8000aaa:	4770      	bx	lr
 8000aac:	e000ed14 	.word	0xe000ed14

08000ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab0:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab2:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab6:	f1c0 0c07 	rsb	ip, r0, #7
 8000aba:	f1bc 0f04 	cmp.w	ip, #4
 8000abe:	bf28      	it	cs
 8000ac0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac4:	1d03      	adds	r3, r0, #4
 8000ac6:	2b06      	cmp	r3, #6
 8000ac8:	d90f      	bls.n	8000aea <NVIC_EncodePriority+0x3a>
 8000aca:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	f04f 3eff 	mov.w	lr, #4294967295
 8000ad0:	fa0e f00c 	lsl.w	r0, lr, ip
 8000ad4:	ea21 0100 	bic.w	r1, r1, r0
 8000ad8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ada:	fa0e fe03 	lsl.w	lr, lr, r3
 8000ade:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000ae2:	ea41 0002 	orr.w	r0, r1, r2
 8000ae6:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aea:	2300      	movs	r3, #0
 8000aec:	e7ee      	b.n	8000acc <NVIC_EncodePriority+0x1c>
	...

08000af0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af0:	4a07      	ldr	r2, [pc, #28]	@ (8000b10 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000af2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000af8:	041b      	lsls	r3, r3, #16
 8000afa:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000afc:	0200      	lsls	r0, r0, #8
 8000afe:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b02:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000b04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000b0c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000b0e:	4770      	bx	lr
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b14:	b510      	push	{r4, lr}
 8000b16:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b18:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <HAL_NVIC_SetPriority+0x1c>)
 8000b1a:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b1c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000b20:	f7ff ffc6 	bl	8000ab0 <NVIC_EncodePriority>
 8000b24:	4601      	mov	r1, r0
 8000b26:	4620      	mov	r0, r4
 8000b28:	f7ff ffae 	bl	8000a88 <__NVIC_SetPriority>
}
 8000b2c:	bd10      	pop	{r4, pc}
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b34:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b36:	f7ff ff99 	bl	8000a6c <__NVIC_EnableIRQ>
}
 8000b3a:	bd08      	pop	{r3, pc}

08000b3c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b3c:	3801      	subs	r0, #1
 8000b3e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b42:	d20b      	bcs.n	8000b5c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b44:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000b48:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4a:	4a05      	ldr	r2, [pc, #20]	@ (8000b60 <HAL_SYSTICK_Config+0x24>)
 8000b4c:	21f0      	movs	r1, #240	@ 0xf0
 8000b4e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b52:	2000      	movs	r0, #0
 8000b54:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b56:	2207      	movs	r2, #7
 8000b58:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b5a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b5c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b64:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000b66:	6805      	ldr	r5, [r0, #0]
 8000b68:	682c      	ldr	r4, [r5, #0]
 8000b6a:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8000b6e:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000b70:	6804      	ldr	r4, [r0, #0]
 8000b72:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000b74:	6883      	ldr	r3, [r0, #8]
 8000b76:	2b40      	cmp	r3, #64	@ 0x40
 8000b78:	d005      	beq.n	8000b86 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000b7a:	6803      	ldr	r3, [r0, #0]
 8000b7c:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000b7e:	6803      	ldr	r3, [r0, #0]
 8000b80:	60da      	str	r2, [r3, #12]
  }
}
 8000b82:	bc30      	pop	{r4, r5}
 8000b84:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8000b86:	6803      	ldr	r3, [r0, #0]
 8000b88:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000b8a:	6803      	ldr	r3, [r0, #0]
 8000b8c:	60d9      	str	r1, [r3, #12]
 8000b8e:	e7f8      	b.n	8000b82 <DMA_SetConfig+0x1e>

08000b90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000b90:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000b92:	6803      	ldr	r3, [r0, #0]
 8000b94:	b2d9      	uxtb	r1, r3
 8000b96:	3910      	subs	r1, #16
 8000b98:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <DMA_CalcBaseAndBitshift+0x34>)
 8000b9a:	fba2 4201 	umull	r4, r2, r2, r1
 8000b9e:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000ba0:	4c09      	ldr	r4, [pc, #36]	@ (8000bc8 <DMA_CalcBaseAndBitshift+0x38>)
 8000ba2:	5ca2      	ldrb	r2, [r4, r2]
 8000ba4:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8000ba6:	295f      	cmp	r1, #95	@ 0x5f
 8000ba8:	d907      	bls.n	8000bba <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000baa:	f36f 0309 	bfc	r3, #0, #10
 8000bae:	3304      	adds	r3, #4
 8000bb0:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8000bb2:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8000bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bb8:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000bba:	f36f 0309 	bfc	r3, #0, #10
 8000bbe:	6583      	str	r3, [r0, #88]	@ 0x58
 8000bc0:	e7f7      	b.n	8000bb2 <DMA_CalcBaseAndBitshift+0x22>
 8000bc2:	bf00      	nop
 8000bc4:	aaaaaaab 	.word	0xaaaaaaab
 8000bc8:	080026a8 	.word	0x080026a8

08000bcc <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000bcc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000bce:	6982      	ldr	r2, [r0, #24]
 8000bd0:	b992      	cbnz	r2, 8000bf8 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d00a      	beq.n	8000bec <DMA_CheckFifoParam+0x20>
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d002      	beq.n	8000be0 <DMA_CheckFifoParam+0x14>
 8000bda:	b10b      	cbz	r3, 8000be0 <DMA_CheckFifoParam+0x14>
 8000bdc:	2000      	movs	r0, #0
 8000bde:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000be0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000be2:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000be6:	d128      	bne.n	8000c3a <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8000be8:	2000      	movs	r0, #0
 8000bea:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000bec:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000bee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8000bf2:	d024      	beq.n	8000c3e <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000bf8:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8000bfc:	d009      	beq.n	8000c12 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d925      	bls.n	8000c4e <DMA_CheckFifoParam+0x82>
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	d125      	bne.n	8000c52 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000c06:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000c08:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000c0c:	d123      	bne.n	8000c56 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8000c0e:	2000      	movs	r0, #0
 8000c10:	4770      	bx	lr
    switch (tmp)
 8000c12:	2b03      	cmp	r3, #3
 8000c14:	d803      	bhi.n	8000c1e <DMA_CheckFifoParam+0x52>
 8000c16:	e8df f003 	tbb	[pc, r3]
 8000c1a:	0414      	.short	0x0414
 8000c1c:	0a14      	.short	0x0a14
 8000c1e:	2000      	movs	r0, #0
 8000c20:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000c22:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000c24:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8000c28:	d10d      	bne.n	8000c46 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000c2e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000c30:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8000c34:	d009      	beq.n	8000c4a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8000c36:	2000      	movs	r0, #0
 8000c38:	4770      	bx	lr
        status = HAL_ERROR;
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	4770      	bx	lr
        status = HAL_ERROR;
 8000c3e:	2001      	movs	r0, #1
 8000c40:	4770      	bx	lr
      status = HAL_ERROR;
 8000c42:	2001      	movs	r0, #1
 8000c44:	4770      	bx	lr
        status = HAL_ERROR;
 8000c46:	2001      	movs	r0, #1
 8000c48:	4770      	bx	lr
        status = HAL_ERROR;
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	4770      	bx	lr
      status = HAL_ERROR;
 8000c4e:	2001      	movs	r0, #1
 8000c50:	4770      	bx	lr
    switch (tmp)
 8000c52:	2000      	movs	r0, #0
 8000c54:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8000c56:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8000c58:	4770      	bx	lr
	...

08000c5c <HAL_DMA_Init>:
{
 8000c5c:	b570      	push	{r4, r5, r6, lr}
 8000c5e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c60:	f7ff fefe 	bl	8000a60 <HAL_GetTick>
  if(hdma == NULL)
 8000c64:	2c00      	cmp	r4, #0
 8000c66:	d05b      	beq.n	8000d20 <HAL_DMA_Init+0xc4>
 8000c68:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8000c70:	2300      	movs	r3, #0
 8000c72:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8000c76:	6822      	ldr	r2, [r4, #0]
 8000c78:	6813      	ldr	r3, [r2, #0]
 8000c7a:	f023 0301 	bic.w	r3, r3, #1
 8000c7e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c80:	6823      	ldr	r3, [r4, #0]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	f012 0f01 	tst.w	r2, #1
 8000c88:	d00a      	beq.n	8000ca0 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c8a:	f7ff fee9 	bl	8000a60 <HAL_GetTick>
 8000c8e:	1b43      	subs	r3, r0, r5
 8000c90:	2b05      	cmp	r3, #5
 8000c92:	d9f5      	bls.n	8000c80 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c94:	2320      	movs	r3, #32
 8000c96:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8000c9e:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8000ca0:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ca2:	4920      	ldr	r1, [pc, #128]	@ (8000d24 <HAL_DMA_Init+0xc8>)
 8000ca4:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ca6:	6862      	ldr	r2, [r4, #4]
 8000ca8:	68a0      	ldr	r0, [r4, #8]
 8000caa:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cac:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000cae:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cb0:	6920      	ldr	r0, [r4, #16]
 8000cb2:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cb4:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cb6:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cb8:	69a0      	ldr	r0, [r4, #24]
 8000cba:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cbc:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cbe:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cc0:	6a20      	ldr	r0, [r4, #32]
 8000cc2:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000cc4:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000cc6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000cc8:	2904      	cmp	r1, #4
 8000cca:	d01e      	beq.n	8000d0a <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8000ccc:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8000cce:	6826      	ldr	r6, [r4, #0]
 8000cd0:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000cd2:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8000cd6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000cd8:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	d107      	bne.n	8000cee <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8000cde:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000ce0:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000ce2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8000ce4:	b11b      	cbz	r3, 8000cee <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000ce6:	4620      	mov	r0, r4
 8000ce8:	f7ff ff70 	bl	8000bcc <DMA_CheckFifoParam>
 8000cec:	b990      	cbnz	r0, 8000d14 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8000cee:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	f7ff ff4d 	bl	8000b90 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000cf6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000cf8:	233f      	movs	r3, #63	@ 0x3f
 8000cfa:	4093      	lsls	r3, r2
 8000cfc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cfe:	2000      	movs	r0, #0
 8000d00:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000d02:	2301      	movs	r3, #1
 8000d04:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8000d08:	e7c9      	b.n	8000c9e <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000d0a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8000d0c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8000d0e:	4301      	orrs	r1, r0
 8000d10:	430a      	orrs	r2, r1
 8000d12:	e7db      	b.n	8000ccc <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000d14:	2340      	movs	r3, #64	@ 0x40
 8000d16:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8000d1e:	e7be      	b.n	8000c9e <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8000d20:	2001      	movs	r0, #1
 8000d22:	e7bc      	b.n	8000c9e <HAL_DMA_Init+0x42>
 8000d24:	f010803f 	.word	0xf010803f

08000d28 <HAL_DMA_Start_IT>:
{
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d2c:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8000d2e:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8000d32:	2801      	cmp	r0, #1
 8000d34:	d02a      	beq.n	8000d8c <HAL_DMA_Start_IT+0x64>
 8000d36:	2001      	movs	r0, #1
 8000d38:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d3c:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8000d40:	2801      	cmp	r0, #1
 8000d42:	d004      	beq.n	8000d4e <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8000d44:	2300      	movs	r3, #0
 8000d46:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8000d4a:	2002      	movs	r0, #2
}
 8000d4c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d4e:	2002      	movs	r0, #2
 8000d50:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d54:	2000      	movs	r0, #0
 8000d56:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f7ff ff03 	bl	8000b64 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d5e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000d60:	233f      	movs	r3, #63	@ 0x3f
 8000d62:	4093      	lsls	r3, r2
 8000d64:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000d66:	6822      	ldr	r2, [r4, #0]
 8000d68:	6813      	ldr	r3, [r2, #0]
 8000d6a:	f043 0316 	orr.w	r3, r3, #22
 8000d6e:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8000d70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000d72:	b123      	cbz	r3, 8000d7e <HAL_DMA_Start_IT+0x56>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000d74:	6822      	ldr	r2, [r4, #0]
 8000d76:	6813      	ldr	r3, [r2, #0]
 8000d78:	f043 0308 	orr.w	r3, r3, #8
 8000d7c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000d7e:	6822      	ldr	r2, [r4, #0]
 8000d80:	6813      	ldr	r3, [r2, #0]
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d88:	2000      	movs	r0, #0
 8000d8a:	e7df      	b.n	8000d4c <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8000d8c:	2002      	movs	r0, #2
 8000d8e:	e7dd      	b.n	8000d4c <HAL_DMA_Start_IT+0x24>

08000d90 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d90:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d003      	beq.n	8000da0 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d98:	2380      	movs	r3, #128	@ 0x80
 8000d9a:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8000da0:	2305      	movs	r3, #5
 8000da2:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8000da6:	6802      	ldr	r2, [r0, #0]
 8000da8:	6813      	ldr	r3, [r2, #0]
 8000daa:	f023 0301 	bic.w	r3, r3, #1
 8000dae:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000db0:	2000      	movs	r0, #0
}
 8000db2:	4770      	bx	lr

08000db4 <HAL_DMA_IRQHandler>:
{
 8000db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000db6:	b083      	sub	sp, #12
 8000db8:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000dbe:	4b72      	ldr	r3, [pc, #456]	@ (8000f88 <HAL_DMA_IRQHandler+0x1d4>)
 8000dc0:	681d      	ldr	r5, [r3, #0]
 8000dc2:	4b72      	ldr	r3, [pc, #456]	@ (8000f8c <HAL_DMA_IRQHandler+0x1d8>)
 8000dc4:	fba3 3505 	umull	r3, r5, r3, r5
 8000dc8:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000dca:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 8000dcc:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000dce:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	4093      	lsls	r3, r2
 8000dd4:	4233      	tst	r3, r6
 8000dd6:	d010      	beq.n	8000dfa <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000dd8:	6803      	ldr	r3, [r0, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	f012 0f04 	tst.w	r2, #4
 8000de0:	d00b      	beq.n	8000dfa <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	f022 0204 	bic.w	r2, r2, #4
 8000de8:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000dea:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8000dec:	2308      	movs	r3, #8
 8000dee:	4093      	lsls	r3, r2
 8000df0:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000df2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000dfa:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	4093      	lsls	r3, r2
 8000e00:	4233      	tst	r3, r6
 8000e02:	d009      	beq.n	8000e18 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000e04:	6822      	ldr	r2, [r4, #0]
 8000e06:	6952      	ldr	r2, [r2, #20]
 8000e08:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8000e0c:	d004      	beq.n	8000e18 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000e0e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000e10:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e18:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	4093      	lsls	r3, r2
 8000e1e:	4233      	tst	r3, r6
 8000e20:	d009      	beq.n	8000e36 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000e22:	6822      	ldr	r2, [r4, #0]
 8000e24:	6812      	ldr	r2, [r2, #0]
 8000e26:	f012 0f02 	tst.w	r2, #2
 8000e2a:	d004      	beq.n	8000e36 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000e2c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000e2e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000e30:	f043 0304 	orr.w	r3, r3, #4
 8000e34:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000e36:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000e38:	2310      	movs	r3, #16
 8000e3a:	4093      	lsls	r3, r2
 8000e3c:	4233      	tst	r3, r6
 8000e3e:	d024      	beq.n	8000e8a <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000e40:	6822      	ldr	r2, [r4, #0]
 8000e42:	6812      	ldr	r2, [r2, #0]
 8000e44:	f012 0f08 	tst.w	r2, #8
 8000e48:	d01f      	beq.n	8000e8a <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000e4a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000e4c:	6823      	ldr	r3, [r4, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8000e54:	d00d      	beq.n	8000e72 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8000e5c:	d104      	bne.n	8000e68 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8000e5e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000e60:	b19b      	cbz	r3, 8000e8a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8000e62:	4620      	mov	r0, r4
 8000e64:	4798      	blx	r3
 8000e66:	e010      	b.n	8000e8a <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000e68:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000e6a:	b173      	cbz	r3, 8000e8a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	4798      	blx	r3
 8000e70:	e00b      	b.n	8000e8a <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8000e78:	d103      	bne.n	8000e82 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	f022 0208 	bic.w	r2, r2, #8
 8000e80:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8000e82:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000e84:	b10b      	cbz	r3, 8000e8a <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8000e86:	4620      	mov	r0, r4
 8000e88:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000e8a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000e8c:	2320      	movs	r3, #32
 8000e8e:	4093      	lsls	r3, r2
 8000e90:	4233      	tst	r3, r6
 8000e92:	d054      	beq.n	8000f3e <HAL_DMA_IRQHandler+0x18a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000e94:	6822      	ldr	r2, [r4, #0]
 8000e96:	6812      	ldr	r2, [r2, #0]
 8000e98:	f012 0f10 	tst.w	r2, #16
 8000e9c:	d04f      	beq.n	8000f3e <HAL_DMA_IRQHandler+0x18a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000e9e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000ea0:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8000ea4:	2b05      	cmp	r3, #5
 8000ea6:	d00e      	beq.n	8000ec6 <HAL_DMA_IRQHandler+0x112>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ea8:	6823      	ldr	r3, [r4, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8000eb0:	d033      	beq.n	8000f1a <HAL_DMA_IRQHandler+0x166>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8000eb8:	d12a      	bne.n	8000f10 <HAL_DMA_IRQHandler+0x15c>
          if(hdma->XferM1CpltCallback != NULL)
 8000eba:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d03e      	beq.n	8000f3e <HAL_DMA_IRQHandler+0x18a>
            hdma->XferM1CpltCallback(hdma);
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	4798      	blx	r3
 8000ec4:	e03b      	b.n	8000f3e <HAL_DMA_IRQHandler+0x18a>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ec6:	6822      	ldr	r2, [r4, #0]
 8000ec8:	6813      	ldr	r3, [r2, #0]
 8000eca:	f023 0316 	bic.w	r3, r3, #22
 8000ece:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ed0:	6822      	ldr	r2, [r4, #0]
 8000ed2:	6953      	ldr	r3, [r2, #20]
 8000ed4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000ed8:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000eda:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000edc:	b1a3      	cbz	r3, 8000f08 <HAL_DMA_IRQHandler+0x154>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ede:	6822      	ldr	r2, [r4, #0]
 8000ee0:	6813      	ldr	r3, [r2, #0]
 8000ee2:	f023 0308 	bic.w	r3, r3, #8
 8000ee6:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ee8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8000eea:	233f      	movs	r3, #63	@ 0x3f
 8000eec:	4093      	lsls	r3, r2
 8000eee:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8000efc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d03f      	beq.n	8000f82 <HAL_DMA_IRQHandler+0x1ce>
          hdma->XferAbortCallback(hdma);
 8000f02:	4620      	mov	r0, r4
 8000f04:	4798      	blx	r3
        return;
 8000f06:	e03c      	b.n	8000f82 <HAL_DMA_IRQHandler+0x1ce>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f08:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1e7      	bne.n	8000ede <HAL_DMA_IRQHandler+0x12a>
 8000f0e:	e7eb      	b.n	8000ee8 <HAL_DMA_IRQHandler+0x134>
          if(hdma->XferCpltCallback != NULL)
 8000f10:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000f12:	b1a3      	cbz	r3, 8000f3e <HAL_DMA_IRQHandler+0x18a>
            hdma->XferCpltCallback(hdma);
 8000f14:	4620      	mov	r0, r4
 8000f16:	4798      	blx	r3
 8000f18:	e011      	b.n	8000f3e <HAL_DMA_IRQHandler+0x18a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8000f20:	d109      	bne.n	8000f36 <HAL_DMA_IRQHandler+0x182>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	f022 0210 	bic.w	r2, r2, #16
 8000f28:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8000f30:	2300      	movs	r3, #0
 8000f32:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8000f36:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000f38:	b10b      	cbz	r3, 8000f3e <HAL_DMA_IRQHandler+0x18a>
          hdma->XferCpltCallback(hdma);
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000f3e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000f40:	b1fb      	cbz	r3, 8000f82 <HAL_DMA_IRQHandler+0x1ce>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000f42:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000f44:	f013 0f01 	tst.w	r3, #1
 8000f48:	d017      	beq.n	8000f7a <HAL_DMA_IRQHandler+0x1c6>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000f4a:	2305      	movs	r3, #5
 8000f4c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8000f50:	6822      	ldr	r2, [r4, #0]
 8000f52:	6813      	ldr	r3, [r2, #0]
 8000f54:	f023 0301 	bic.w	r3, r3, #1
 8000f58:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8000f5a:	9b01      	ldr	r3, [sp, #4]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	42ab      	cmp	r3, r5
 8000f62:	d804      	bhi.n	8000f6e <HAL_DMA_IRQHandler+0x1ba>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000f64:	6823      	ldr	r3, [r4, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f013 0f01 	tst.w	r3, #1
 8000f6c:	d1f5      	bne.n	8000f5a <HAL_DMA_IRQHandler+0x1a6>
      hdma->State = HAL_DMA_STATE_READY;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8000f74:	2300      	movs	r3, #0
 8000f76:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8000f7a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000f7c:	b10b      	cbz	r3, 8000f82 <HAL_DMA_IRQHandler+0x1ce>
      hdma->XferErrorCallback(hdma);
 8000f7e:	4620      	mov	r0, r4
 8000f80:	4798      	blx	r3
}
 8000f82:	b003      	add	sp, #12
 8000f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000c40 	.word	0x20000c40
 8000f8c:	1b4e81b5 	.word	0x1b4e81b5

08000f90 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f90:	2300      	movs	r3, #0
 8000f92:	2b0f      	cmp	r3, #15
 8000f94:	f200 80e3 	bhi.w	800115e <HAL_GPIO_Init+0x1ce>
{
 8000f98:	b570      	push	{r4, r5, r6, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	e065      	b.n	800106a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f9e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fa0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000fa4:	2403      	movs	r4, #3
 8000fa6:	fa04 f40e 	lsl.w	r4, r4, lr
 8000faa:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fae:	68cc      	ldr	r4, [r1, #12]
 8000fb0:	fa04 f40e 	lsl.w	r4, r4, lr
 8000fb4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000fb6:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fba:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fbe:	684a      	ldr	r2, [r1, #4]
 8000fc0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000fc4:	409a      	lsls	r2, r3
 8000fc6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000fc8:	6042      	str	r2, [r0, #4]
 8000fca:	e05c      	b.n	8001086 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fcc:	08dc      	lsrs	r4, r3, #3
 8000fce:	3408      	adds	r4, #8
 8000fd0:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fd4:	f003 0507 	and.w	r5, r3, #7
 8000fd8:	00ad      	lsls	r5, r5, #2
 8000fda:	f04f 0e0f 	mov.w	lr, #15
 8000fde:	fa0e fe05 	lsl.w	lr, lr, r5
 8000fe2:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fe6:	690a      	ldr	r2, [r1, #16]
 8000fe8:	40aa      	lsls	r2, r5
 8000fea:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000fee:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000ff2:	e05c      	b.n	80010ae <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff4:	2206      	movs	r2, #6
 8000ff6:	e000      	b.n	8000ffa <HAL_GPIO_Init+0x6a>
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	fa02 f20e 	lsl.w	r2, r2, lr
 8000ffe:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001000:	3402      	adds	r4, #2
 8001002:	4d57      	ldr	r5, [pc, #348]	@ (8001160 <HAL_GPIO_Init+0x1d0>)
 8001004:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001008:	4a56      	ldr	r2, [pc, #344]	@ (8001164 <HAL_GPIO_Init+0x1d4>)
 800100a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800100c:	ea6f 020c 	mvn.w	r2, ip
 8001010:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001014:	684e      	ldr	r6, [r1, #4]
 8001016:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 800101a:	d001      	beq.n	8001020 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 800101c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001020:	4c50      	ldr	r4, [pc, #320]	@ (8001164 <HAL_GPIO_Init+0x1d4>)
 8001022:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001024:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001026:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800102a:	684e      	ldr	r6, [r1, #4]
 800102c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001030:	d001      	beq.n	8001036 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001032:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001036:	4c4b      	ldr	r4, [pc, #300]	@ (8001164 <HAL_GPIO_Init+0x1d4>)
 8001038:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 800103a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800103c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001040:	684e      	ldr	r6, [r1, #4]
 8001042:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001046:	d001      	beq.n	800104c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001048:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 800104c:	4c45      	ldr	r4, [pc, #276]	@ (8001164 <HAL_GPIO_Init+0x1d4>)
 800104e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001050:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001052:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001054:	684d      	ldr	r5, [r1, #4]
 8001056:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 800105a:	d001      	beq.n	8001060 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 800105c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001060:	4c40      	ldr	r4, [pc, #256]	@ (8001164 <HAL_GPIO_Init+0x1d4>)
 8001062:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001064:	3301      	adds	r3, #1
 8001066:	2b0f      	cmp	r3, #15
 8001068:	d877      	bhi.n	800115a <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 800106a:	2201      	movs	r2, #1
 800106c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106e:	680c      	ldr	r4, [r1, #0]
 8001070:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001074:	ea32 0404 	bics.w	r4, r2, r4
 8001078:	d1f4      	bne.n	8001064 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107a:	684c      	ldr	r4, [r1, #4]
 800107c:	f004 0403 	and.w	r4, r4, #3
 8001080:	3c01      	subs	r4, #1
 8001082:	2c01      	cmp	r4, #1
 8001084:	d98b      	bls.n	8000f9e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001086:	684a      	ldr	r2, [r1, #4]
 8001088:	f002 0203 	and.w	r2, r2, #3
 800108c:	2a03      	cmp	r2, #3
 800108e:	d009      	beq.n	80010a4 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001090:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001092:	005d      	lsls	r5, r3, #1
 8001094:	2203      	movs	r2, #3
 8001096:	40aa      	lsls	r2, r5
 8001098:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800109c:	688a      	ldr	r2, [r1, #8]
 800109e:	40aa      	lsls	r2, r5
 80010a0:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80010a2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a4:	684a      	ldr	r2, [r1, #4]
 80010a6:	f002 0203 	and.w	r2, r2, #3
 80010aa:	2a02      	cmp	r2, #2
 80010ac:	d08e      	beq.n	8000fcc <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80010ae:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010b0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80010b4:	2203      	movs	r2, #3
 80010b6:	fa02 f20e 	lsl.w	r2, r2, lr
 80010ba:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010be:	684a      	ldr	r2, [r1, #4]
 80010c0:	f002 0203 	and.w	r2, r2, #3
 80010c4:	fa02 f20e 	lsl.w	r2, r2, lr
 80010c8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80010ca:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010cc:	684a      	ldr	r2, [r1, #4]
 80010ce:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 80010d2:	d0c7      	beq.n	8001064 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d4:	2200      	movs	r2, #0
 80010d6:	9201      	str	r2, [sp, #4]
 80010d8:	4a23      	ldr	r2, [pc, #140]	@ (8001168 <HAL_GPIO_Init+0x1d8>)
 80010da:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 80010dc:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80010e0:	6454      	str	r4, [r2, #68]	@ 0x44
 80010e2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80010e4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80010e8:	9201      	str	r2, [sp, #4]
 80010ea:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80010ec:	089c      	lsrs	r4, r3, #2
 80010ee:	1ca5      	adds	r5, r4, #2
 80010f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001160 <HAL_GPIO_Init+0x1d0>)
 80010f2:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010f6:	f003 0e03 	and.w	lr, r3, #3
 80010fa:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80010fe:	220f      	movs	r2, #15
 8001100:	fa02 f20e 	lsl.w	r2, r2, lr
 8001104:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001108:	4a18      	ldr	r2, [pc, #96]	@ (800116c <HAL_GPIO_Init+0x1dc>)
 800110a:	4290      	cmp	r0, r2
 800110c:	f43f af74 	beq.w	8000ff8 <HAL_GPIO_Init+0x68>
 8001110:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001114:	4290      	cmp	r0, r2
 8001116:	d016      	beq.n	8001146 <HAL_GPIO_Init+0x1b6>
 8001118:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800111c:	4290      	cmp	r0, r2
 800111e:	d014      	beq.n	800114a <HAL_GPIO_Init+0x1ba>
 8001120:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001124:	4290      	cmp	r0, r2
 8001126:	d012      	beq.n	800114e <HAL_GPIO_Init+0x1be>
 8001128:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800112c:	4290      	cmp	r0, r2
 800112e:	d010      	beq.n	8001152 <HAL_GPIO_Init+0x1c2>
 8001130:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001134:	4290      	cmp	r0, r2
 8001136:	d00e      	beq.n	8001156 <HAL_GPIO_Init+0x1c6>
 8001138:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800113c:	4290      	cmp	r0, r2
 800113e:	f43f af59 	beq.w	8000ff4 <HAL_GPIO_Init+0x64>
 8001142:	2207      	movs	r2, #7
 8001144:	e759      	b.n	8000ffa <HAL_GPIO_Init+0x6a>
 8001146:	2201      	movs	r2, #1
 8001148:	e757      	b.n	8000ffa <HAL_GPIO_Init+0x6a>
 800114a:	2202      	movs	r2, #2
 800114c:	e755      	b.n	8000ffa <HAL_GPIO_Init+0x6a>
 800114e:	2203      	movs	r2, #3
 8001150:	e753      	b.n	8000ffa <HAL_GPIO_Init+0x6a>
 8001152:	2204      	movs	r2, #4
 8001154:	e751      	b.n	8000ffa <HAL_GPIO_Init+0x6a>
 8001156:	2205      	movs	r2, #5
 8001158:	e74f      	b.n	8000ffa <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 800115a:	b002      	add	sp, #8
 800115c:	bd70      	pop	{r4, r5, r6, pc}
 800115e:	4770      	bx	lr
 8001160:	40013800 	.word	0x40013800
 8001164:	40013c00 	.word	0x40013c00
 8001168:	40023800 	.word	0x40023800
 800116c:	40020000 	.word	0x40020000

08001170 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001170:	b10a      	cbz	r2, 8001176 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001172:	6181      	str	r1, [r0, #24]
 8001174:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001176:	0409      	lsls	r1, r1, #16
 8001178:	6181      	str	r1, [r0, #24]
  }
}
 800117a:	4770      	bx	lr

0800117c <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800117c:	4770      	bx	lr
	...

08001180 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001180:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001182:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	4203      	tst	r3, r0
 8001188:	d100      	bne.n	800118c <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 800118a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800118c:	4b02      	ldr	r3, [pc, #8]	@ (8001198 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800118e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001190:	f7ff fff4 	bl	800117c <HAL_GPIO_EXTI_Callback>
}
 8001194:	e7f9      	b.n	800118a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001196:	bf00      	nop
 8001198:	40013c00 	.word	0x40013c00

0800119c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800119c:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119e:	2100      	movs	r1, #0
 80011a0:	9100      	str	r1, [sp, #0]
 80011a2:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <HAL_MspInit+0x34>)
 80011a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80011a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80011aa:	645a      	str	r2, [r3, #68]	@ 0x44
 80011ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80011ae:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80011b2:	9200      	str	r2, [sp, #0]
 80011b4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	9101      	str	r1, [sp, #4]
 80011b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011ba:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80011be:	641a      	str	r2, [r3, #64]	@ 0x40
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c6:	9301      	str	r3, [sp, #4]
 80011c8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ca:	b002      	add	sp, #8
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800

080011d4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d4:	b510      	push	{r4, lr}
 80011d6:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 80011d8:	6803      	ldr	r3, [r0, #0]
 80011da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011de:	d004      	beq.n	80011ea <HAL_TIM_Base_MspInit+0x16>

    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80011e0:	4a1e      	ldr	r2, [pc, #120]	@ (800125c <HAL_TIM_Base_MspInit+0x88>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d02c      	beq.n	8001240 <HAL_TIM_Base_MspInit+0x6c>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011e6:	b002      	add	sp, #8
 80011e8:	bd10      	pop	{r4, pc}
 80011ea:	4604      	mov	r4, r0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ec:	2300      	movs	r3, #0
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001260 <HAL_TIM_Base_MspInit+0x8c>)
 80011f2:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80011f4:	f041 0101 	orr.w	r1, r1, #1
 80011f8:	6411      	str	r1, [r2, #64]	@ 0x40
 80011fa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80011fc:	f002 0201 	and.w	r2, r2, #1
 8001200:	9200      	str	r2, [sp, #0]
 8001202:	9a00      	ldr	r2, [sp, #0]
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8001204:	4817      	ldr	r0, [pc, #92]	@ (8001264 <HAL_TIM_Base_MspInit+0x90>)
 8001206:	4a18      	ldr	r2, [pc, #96]	@ (8001268 <HAL_TIM_Base_MspInit+0x94>)
 8001208:	6002      	str	r2, [r0, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 800120a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800120e:	6042      	str	r2, [r0, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001210:	6083      	str	r3, [r0, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001212:	60c3      	str	r3, [r0, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001214:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001218:	6102      	str	r2, [r0, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800121a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800121e:	6142      	str	r2, [r0, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001220:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001224:	6182      	str	r2, [r0, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001226:	61c3      	str	r3, [r0, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001228:	6203      	str	r3, [r0, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800122a:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800122c:	f7ff fd16 	bl	8000c5c <HAL_DMA_Init>
 8001230:	b918      	cbnz	r0, 800123a <HAL_TIM_Base_MspInit+0x66>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001232:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <HAL_TIM_Base_MspInit+0x90>)
 8001234:	6263      	str	r3, [r4, #36]	@ 0x24
 8001236:	639c      	str	r4, [r3, #56]	@ 0x38
 8001238:	e7d5      	b.n	80011e6 <HAL_TIM_Base_MspInit+0x12>
      Error_Handler();
 800123a:	f7ff fa63 	bl	8000704 <Error_Handler>
 800123e:	e7f8      	b.n	8001232 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001240:	2300      	movs	r3, #0
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <HAL_TIM_Base_MspInit+0x8c>)
 8001246:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001248:	f042 0202 	orr.w	r2, r2, #2
 800124c:	641a      	str	r2, [r3, #64]	@ 0x40
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	9b01      	ldr	r3, [sp, #4]
}
 8001258:	e7c5      	b.n	80011e6 <HAL_TIM_Base_MspInit+0x12>
 800125a:	bf00      	nop
 800125c:	40000400 	.word	0x40000400
 8001260:	40023800 	.word	0x40023800
 8001264:	20000c68 	.word	0x20000c68
 8001268:	40026088 	.word	0x40026088

0800126c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800126c:	b500      	push	{lr}
 800126e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	2300      	movs	r3, #0
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	9302      	str	r3, [sp, #8]
 8001276:	9303      	str	r3, [sp, #12]
 8001278:	9304      	str	r3, [sp, #16]
 800127a:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM3)
 800127c:	6802      	ldr	r2, [r0, #0]
 800127e:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <HAL_TIM_MspPostInit+0x4c>)
 8001280:	429a      	cmp	r2, r3
 8001282:	d002      	beq.n	800128a <HAL_TIM_MspPostInit+0x1e>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001284:	b007      	add	sp, #28
 8001286:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <HAL_TIM_MspPostInit+0x50>)
 8001290:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001292:	f042 0202 	orr.w	r2, r2, #2
 8001296:	631a      	str	r2, [r3, #48]	@ 0x30
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a2:	2301      	movs	r3, #1
 80012a4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012aa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ac:	a901      	add	r1, sp, #4
 80012ae:	4804      	ldr	r0, [pc, #16]	@ (80012c0 <HAL_TIM_MspPostInit+0x54>)
 80012b0:	f7ff fe6e 	bl	8000f90 <HAL_GPIO_Init>
}
 80012b4:	e7e6      	b.n	8001284 <HAL_TIM_MspPostInit+0x18>
 80012b6:	bf00      	nop
 80012b8:	40000400 	.word	0x40000400
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020400 	.word	0x40020400

080012c4 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012c4:	2800      	cmp	r0, #0
 80012c6:	f000 809b 	beq.w	8001400 <HAL_RCC_ClockConfig+0x13c>
{
 80012ca:	b570      	push	{r4, r5, r6, lr}
 80012cc:	460d      	mov	r5, r1
 80012ce:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012d0:	4b4f      	ldr	r3, [pc, #316]	@ (8001410 <HAL_RCC_ClockConfig+0x14c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 030f 	and.w	r3, r3, #15
 80012d8:	428b      	cmp	r3, r1
 80012da:	d208      	bcs.n	80012ee <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012dc:	b2cb      	uxtb	r3, r1
 80012de:	4a4c      	ldr	r2, [pc, #304]	@ (8001410 <HAL_RCC_ClockConfig+0x14c>)
 80012e0:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012e2:	6813      	ldr	r3, [r2, #0]
 80012e4:	f003 030f 	and.w	r3, r3, #15
 80012e8:	428b      	cmp	r3, r1
 80012ea:	f040 808b 	bne.w	8001404 <HAL_RCC_ClockConfig+0x140>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012ee:	6823      	ldr	r3, [r4, #0]
 80012f0:	f013 0f02 	tst.w	r3, #2
 80012f4:	d017      	beq.n	8001326 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012f6:	f013 0f04 	tst.w	r3, #4
 80012fa:	d004      	beq.n	8001306 <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012fc:	4a45      	ldr	r2, [pc, #276]	@ (8001414 <HAL_RCC_ClockConfig+0x150>)
 80012fe:	6893      	ldr	r3, [r2, #8]
 8001300:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001304:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001306:	6823      	ldr	r3, [r4, #0]
 8001308:	f013 0f08 	tst.w	r3, #8
 800130c:	d004      	beq.n	8001318 <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800130e:	4a41      	ldr	r2, [pc, #260]	@ (8001414 <HAL_RCC_ClockConfig+0x150>)
 8001310:	6893      	ldr	r3, [r2, #8]
 8001312:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001316:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001318:	4a3e      	ldr	r2, [pc, #248]	@ (8001414 <HAL_RCC_ClockConfig+0x150>)
 800131a:	6893      	ldr	r3, [r2, #8]
 800131c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001320:	68a1      	ldr	r1, [r4, #8]
 8001322:	430b      	orrs	r3, r1
 8001324:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001326:	6823      	ldr	r3, [r4, #0]
 8001328:	f013 0f01 	tst.w	r3, #1
 800132c:	d032      	beq.n	8001394 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800132e:	6863      	ldr	r3, [r4, #4]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d021      	beq.n	8001378 <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001334:	1e9a      	subs	r2, r3, #2
 8001336:	2a01      	cmp	r2, #1
 8001338:	d925      	bls.n	8001386 <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133a:	4a36      	ldr	r2, [pc, #216]	@ (8001414 <HAL_RCC_ClockConfig+0x150>)
 800133c:	6812      	ldr	r2, [r2, #0]
 800133e:	f012 0f02 	tst.w	r2, #2
 8001342:	d061      	beq.n	8001408 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001344:	4933      	ldr	r1, [pc, #204]	@ (8001414 <HAL_RCC_ClockConfig+0x150>)
 8001346:	688a      	ldr	r2, [r1, #8]
 8001348:	f022 0203 	bic.w	r2, r2, #3
 800134c:	4313      	orrs	r3, r2
 800134e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001350:	f7ff fb86 	bl	8000a60 <HAL_GetTick>
 8001354:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001356:	4b2f      	ldr	r3, [pc, #188]	@ (8001414 <HAL_RCC_ClockConfig+0x150>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	6862      	ldr	r2, [r4, #4]
 8001360:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001364:	d016      	beq.n	8001394 <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001366:	f7ff fb7b 	bl	8000a60 <HAL_GetTick>
 800136a:	1b80      	subs	r0, r0, r6
 800136c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001370:	4298      	cmp	r0, r3
 8001372:	d9f0      	bls.n	8001356 <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 8001374:	2003      	movs	r0, #3
 8001376:	e042      	b.n	80013fe <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001378:	4a26      	ldr	r2, [pc, #152]	@ (8001414 <HAL_RCC_ClockConfig+0x150>)
 800137a:	6812      	ldr	r2, [r2, #0]
 800137c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001380:	d1e0      	bne.n	8001344 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001382:	2001      	movs	r0, #1
 8001384:	e03b      	b.n	80013fe <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001386:	4a23      	ldr	r2, [pc, #140]	@ (8001414 <HAL_RCC_ClockConfig+0x150>)
 8001388:	6812      	ldr	r2, [r2, #0]
 800138a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800138e:	d1d9      	bne.n	8001344 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001390:	2001      	movs	r0, #1
 8001392:	e034      	b.n	80013fe <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001394:	4b1e      	ldr	r3, [pc, #120]	@ (8001410 <HAL_RCC_ClockConfig+0x14c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 030f 	and.w	r3, r3, #15
 800139c:	42ab      	cmp	r3, r5
 800139e:	d907      	bls.n	80013b0 <HAL_RCC_ClockConfig+0xec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a0:	b2ea      	uxtb	r2, r5
 80013a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001410 <HAL_RCC_ClockConfig+0x14c>)
 80013a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 030f 	and.w	r3, r3, #15
 80013ac:	42ab      	cmp	r3, r5
 80013ae:	d12d      	bne.n	800140c <HAL_RCC_ClockConfig+0x148>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b0:	6823      	ldr	r3, [r4, #0]
 80013b2:	f013 0f04 	tst.w	r3, #4
 80013b6:	d006      	beq.n	80013c6 <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013b8:	4a16      	ldr	r2, [pc, #88]	@ (8001414 <HAL_RCC_ClockConfig+0x150>)
 80013ba:	6893      	ldr	r3, [r2, #8]
 80013bc:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80013c0:	68e1      	ldr	r1, [r4, #12]
 80013c2:	430b      	orrs	r3, r1
 80013c4:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c6:	6823      	ldr	r3, [r4, #0]
 80013c8:	f013 0f08 	tst.w	r3, #8
 80013cc:	d007      	beq.n	80013de <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013ce:	4a11      	ldr	r2, [pc, #68]	@ (8001414 <HAL_RCC_ClockConfig+0x150>)
 80013d0:	6893      	ldr	r3, [r2, #8]
 80013d2:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80013d6:	6921      	ldr	r1, [r4, #16]
 80013d8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013dc:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013de:	f000 f821 	bl	8001424 <HAL_RCC_GetSysClockFreq>
 80013e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <HAL_RCC_ClockConfig+0x150>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001418 <HAL_RCC_ClockConfig+0x154>)
 80013ec:	5cd3      	ldrb	r3, [r2, r3]
 80013ee:	40d8      	lsrs	r0, r3
 80013f0:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <HAL_RCC_ClockConfig+0x158>)
 80013f2:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80013f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <HAL_RCC_ClockConfig+0x15c>)
 80013f6:	6818      	ldr	r0, [r3, #0]
 80013f8:	f7ff fae6 	bl	80009c8 <HAL_InitTick>

  return HAL_OK;
 80013fc:	2000      	movs	r0, #0
}
 80013fe:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001400:	2001      	movs	r0, #1
}
 8001402:	4770      	bx	lr
      return HAL_ERROR;
 8001404:	2001      	movs	r0, #1
 8001406:	e7fa      	b.n	80013fe <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001408:	2001      	movs	r0, #1
 800140a:	e7f8      	b.n	80013fe <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 800140c:	2001      	movs	r0, #1
 800140e:	e7f6      	b.n	80013fe <HAL_RCC_ClockConfig+0x13a>
 8001410:	40023c00 	.word	0x40023c00
 8001414:	40023800 	.word	0x40023800
 8001418:	080026b0 	.word	0x080026b0
 800141c:	20000c40 	.word	0x20000c40
 8001420:	20000c3c 	.word	0x20000c3c

08001424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001424:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001426:	4b46      	ldr	r3, [pc, #280]	@ (8001540 <HAL_RCC_GetSysClockFreq+0x11c>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	2b08      	cmp	r3, #8
 8001430:	d005      	beq.n	800143e <HAL_RCC_GetSysClockFreq+0x1a>
 8001432:	2b0c      	cmp	r3, #12
 8001434:	d043      	beq.n	80014be <HAL_RCC_GetSysClockFreq+0x9a>
 8001436:	2b04      	cmp	r3, #4
 8001438:	d17f      	bne.n	800153a <HAL_RCC_GetSysClockFreq+0x116>
      sysclockfreq = HSI_VALUE;
      break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800143a:	4842      	ldr	r0, [pc, #264]	@ (8001544 <HAL_RCC_GetSysClockFreq+0x120>)
 800143c:	e019      	b.n	8001472 <HAL_RCC_GetSysClockFreq+0x4e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800143e:	4b40      	ldr	r3, [pc, #256]	@ (8001540 <HAL_RCC_GetSysClockFreq+0x11c>)
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800144c:	d012      	beq.n	8001474 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800144e:	4b3c      	ldr	r3, [pc, #240]	@ (8001540 <HAL_RCC_GetSysClockFreq+0x11c>)
 8001450:	6859      	ldr	r1, [r3, #4]
 8001452:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001456:	483b      	ldr	r0, [pc, #236]	@ (8001544 <HAL_RCC_GetSysClockFreq+0x120>)
 8001458:	2300      	movs	r3, #0
 800145a:	fba1 0100 	umull	r0, r1, r1, r0
 800145e:	f7fe feb1 	bl	80001c4 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001462:	4b37      	ldr	r3, [pc, #220]	@ (8001540 <HAL_RCC_GetSysClockFreq+0x11c>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800146a:	3301      	adds	r3, #1
 800146c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800146e:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001472:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001474:	4b32      	ldr	r3, [pc, #200]	@ (8001540 <HAL_RCC_GetSysClockFreq+0x11c>)
 8001476:	6858      	ldr	r0, [r3, #4]
 8001478:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800147c:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001480:	ebbc 0c00 	subs.w	ip, ip, r0
 8001484:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001488:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800148c:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001490:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001494:	ebb1 010c 	subs.w	r1, r1, ip
 8001498:	eb63 030e 	sbc.w	r3, r3, lr
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014a2:	00c9      	lsls	r1, r1, #3
 80014a4:	eb11 0c00 	adds.w	ip, r1, r0
 80014a8:	f143 0300 	adc.w	r3, r3, #0
 80014ac:	0299      	lsls	r1, r3, #10
 80014ae:	2300      	movs	r3, #0
 80014b0:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80014b4:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80014b8:	f7fe fe84 	bl	80001c4 <__aeabi_uldivmod>
 80014bc:	e7d1      	b.n	8001462 <HAL_RCC_GetSysClockFreq+0x3e>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014be:	4b20      	ldr	r3, [pc, #128]	@ (8001540 <HAL_RCC_GetSysClockFreq+0x11c>)
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80014cc:	d010      	beq.n	80014f0 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001540 <HAL_RCC_GetSysClockFreq+0x11c>)
 80014d0:	6859      	ldr	r1, [r3, #4]
 80014d2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80014d6:	481b      	ldr	r0, [pc, #108]	@ (8001544 <HAL_RCC_GetSysClockFreq+0x120>)
 80014d8:	2300      	movs	r3, #0
 80014da:	fba1 0100 	umull	r0, r1, r1, r0
 80014de:	f7fe fe71 	bl	80001c4 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80014e2:	4b17      	ldr	r3, [pc, #92]	@ (8001540 <HAL_RCC_GetSysClockFreq+0x11c>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco / pllr;
 80014ea:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80014ee:	e7c0      	b.n	8001472 <HAL_RCC_GetSysClockFreq+0x4e>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f0:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <HAL_RCC_GetSysClockFreq+0x11c>)
 80014f2:	6858      	ldr	r0, [r3, #4]
 80014f4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80014f8:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80014fc:	ebbc 0c00 	subs.w	ip, ip, r0
 8001500:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001504:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001508:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 800150c:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001510:	ebb1 010c 	subs.w	r1, r1, ip
 8001514:	eb63 030e 	sbc.w	r3, r3, lr
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800151e:	00c9      	lsls	r1, r1, #3
 8001520:	eb11 0c00 	adds.w	ip, r1, r0
 8001524:	f143 0300 	adc.w	r3, r3, #0
 8001528:	0299      	lsls	r1, r3, #10
 800152a:	2300      	movs	r3, #0
 800152c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001530:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001534:	f7fe fe46 	bl	80001c4 <__aeabi_uldivmod>
 8001538:	e7d3      	b.n	80014e2 <HAL_RCC_GetSysClockFreq+0xbe>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800153a:	4803      	ldr	r0, [pc, #12]	@ (8001548 <HAL_RCC_GetSysClockFreq+0x124>)
  return sysclockfreq;
 800153c:	e799      	b.n	8001472 <HAL_RCC_GetSysClockFreq+0x4e>
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800
 8001544:	017d7840 	.word	0x017d7840
 8001548:	00f42400 	.word	0x00f42400

0800154c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800154c:	2800      	cmp	r0, #0
 800154e:	f000 8201 	beq.w	8001954 <HAL_RCC_OscConfig+0x408>
{
 8001552:	b570      	push	{r4, r5, r6, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001558:	6803      	ldr	r3, [r0, #0]
 800155a:	f013 0f01 	tst.w	r3, #1
 800155e:	d041      	beq.n	80015e4 <HAL_RCC_OscConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001560:	4b99      	ldr	r3, [pc, #612]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 030c 	and.w	r3, r3, #12
 8001568:	2b04      	cmp	r3, #4
 800156a:	d032      	beq.n	80015d2 <HAL_RCC_OscConfig+0x86>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800156c:	4b96      	ldr	r3, [pc, #600]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 030c 	and.w	r3, r3, #12
        || \
 8001574:	2b08      	cmp	r3, #8
 8001576:	d027      	beq.n	80015c8 <HAL_RCC_OscConfig+0x7c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001578:	4b93      	ldr	r3, [pc, #588]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001580:	2b0c      	cmp	r3, #12
 8001582:	d059      	beq.n	8001638 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001584:	6863      	ldr	r3, [r4, #4]
 8001586:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800158a:	d05b      	beq.n	8001644 <HAL_RCC_OscConfig+0xf8>
 800158c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001590:	d05e      	beq.n	8001650 <HAL_RCC_OscConfig+0x104>
 8001592:	4b8d      	ldr	r3, [pc, #564]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80015a2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015a4:	6863      	ldr	r3, [r4, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d05c      	beq.n	8001664 <HAL_RCC_OscConfig+0x118>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015aa:	f7ff fa59 	bl	8000a60 <HAL_GetTick>
 80015ae:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b0:	4b85      	ldr	r3, [pc, #532]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80015b8:	d114      	bne.n	80015e4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ba:	f7ff fa51 	bl	8000a60 <HAL_GetTick>
 80015be:	1b40      	subs	r0, r0, r5
 80015c0:	2864      	cmp	r0, #100	@ 0x64
 80015c2:	d9f5      	bls.n	80015b0 <HAL_RCC_OscConfig+0x64>
          {
            return HAL_TIMEOUT;
 80015c4:	2003      	movs	r0, #3
 80015c6:	e1cc      	b.n	8001962 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80015c8:	4b7f      	ldr	r3, [pc, #508]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80015d0:	d0d2      	beq.n	8001578 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d2:	4b7d      	ldr	r3, [pc, #500]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80015da:	d003      	beq.n	80015e4 <HAL_RCC_OscConfig+0x98>
 80015dc:	6863      	ldr	r3, [r4, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 81ba 	beq.w	8001958 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e4:	6823      	ldr	r3, [r4, #0]
 80015e6:	f013 0f02 	tst.w	r3, #2
 80015ea:	d060      	beq.n	80016ae <HAL_RCC_OscConfig+0x162>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80015ec:	4b76      	ldr	r3, [pc, #472]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f013 0f0c 	tst.w	r3, #12
 80015f4:	d04a      	beq.n	800168c <HAL_RCC_OscConfig+0x140>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80015f6:	4b74      	ldr	r3, [pc, #464]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 030c 	and.w	r3, r3, #12
        || \
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d03f      	beq.n	8001682 <HAL_RCC_OscConfig+0x136>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001602:	4b71      	ldr	r3, [pc, #452]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800160a:	2b0c      	cmp	r3, #12
 800160c:	d069      	beq.n	80016e2 <HAL_RCC_OscConfig+0x196>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800160e:	68e3      	ldr	r3, [r4, #12]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d075      	beq.n	8001700 <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001614:	4b6d      	ldr	r3, [pc, #436]	@ (80017cc <HAL_RCC_OscConfig+0x280>)
 8001616:	2201      	movs	r2, #1
 8001618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161a:	f7ff fa21 	bl	8000a60 <HAL_GetTick>
 800161e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001620:	4b69      	ldr	r3, [pc, #420]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f013 0f02 	tst.w	r3, #2
 8001628:	d161      	bne.n	80016ee <HAL_RCC_OscConfig+0x1a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800162a:	f7ff fa19 	bl	8000a60 <HAL_GetTick>
 800162e:	1b40      	subs	r0, r0, r5
 8001630:	2802      	cmp	r0, #2
 8001632:	d9f5      	bls.n	8001620 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8001634:	2003      	movs	r0, #3
 8001636:	e194      	b.n	8001962 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001638:	4b63      	ldr	r3, [pc, #396]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8001640:	d0a0      	beq.n	8001584 <HAL_RCC_OscConfig+0x38>
 8001642:	e7c6      	b.n	80015d2 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001644:	4a60      	ldr	r2, [pc, #384]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 8001646:	6813      	ldr	r3, [r2, #0]
 8001648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e7a9      	b.n	80015a4 <HAL_RCC_OscConfig+0x58>
 8001650:	4b5d      	ldr	r3, [pc, #372]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	e79f      	b.n	80015a4 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8001664:	f7ff f9fc 	bl	8000a60 <HAL_GetTick>
 8001668:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166a:	4b57      	ldr	r3, [pc, #348]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001672:	d0b7      	beq.n	80015e4 <HAL_RCC_OscConfig+0x98>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001674:	f7ff f9f4 	bl	8000a60 <HAL_GetTick>
 8001678:	1b40      	subs	r0, r0, r5
 800167a:	2864      	cmp	r0, #100	@ 0x64
 800167c:	d9f5      	bls.n	800166a <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 800167e:	2003      	movs	r0, #3
 8001680:	e16f      	b.n	8001962 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001682:	4b51      	ldr	r3, [pc, #324]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800168a:	d1ba      	bne.n	8001602 <HAL_RCC_OscConfig+0xb6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168c:	4b4e      	ldr	r3, [pc, #312]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f013 0f02 	tst.w	r3, #2
 8001694:	d003      	beq.n	800169e <HAL_RCC_OscConfig+0x152>
 8001696:	68e3      	ldr	r3, [r4, #12]
 8001698:	2b01      	cmp	r3, #1
 800169a:	f040 815f 	bne.w	800195c <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169e:	4a4a      	ldr	r2, [pc, #296]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 80016a0:	6813      	ldr	r3, [r2, #0]
 80016a2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80016a6:	6921      	ldr	r1, [r4, #16]
 80016a8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80016ac:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ae:	6823      	ldr	r3, [r4, #0]
 80016b0:	f013 0f08 	tst.w	r3, #8
 80016b4:	d049      	beq.n	800174a <HAL_RCC_OscConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016b6:	6963      	ldr	r3, [r4, #20]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d033      	beq.n	8001724 <HAL_RCC_OscConfig+0x1d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016bc:	4b43      	ldr	r3, [pc, #268]	@ (80017cc <HAL_RCC_OscConfig+0x280>)
 80016be:	2201      	movs	r2, #1
 80016c0:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c4:	f7ff f9cc 	bl	8000a60 <HAL_GetTick>
 80016c8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ca:	4b3f      	ldr	r3, [pc, #252]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 80016cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016ce:	f013 0f02 	tst.w	r3, #2
 80016d2:	d13a      	bne.n	800174a <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d4:	f7ff f9c4 	bl	8000a60 <HAL_GetTick>
 80016d8:	1b40      	subs	r0, r0, r5
 80016da:	2802      	cmp	r0, #2
 80016dc:	d9f5      	bls.n	80016ca <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 80016de:	2003      	movs	r0, #3
 80016e0:	e13f      	b.n	8001962 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016e2:	4b39      	ldr	r3, [pc, #228]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80016ea:	d190      	bne.n	800160e <HAL_RCC_OscConfig+0xc2>
 80016ec:	e7ce      	b.n	800168c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ee:	4a36      	ldr	r2, [pc, #216]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 80016f0:	6813      	ldr	r3, [r2, #0]
 80016f2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80016f6:	6921      	ldr	r1, [r4, #16]
 80016f8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	e7d6      	b.n	80016ae <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8001700:	4b32      	ldr	r3, [pc, #200]	@ (80017cc <HAL_RCC_OscConfig+0x280>)
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001706:	f7ff f9ab 	bl	8000a60 <HAL_GetTick>
 800170a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170c:	4b2e      	ldr	r3, [pc, #184]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f013 0f02 	tst.w	r3, #2
 8001714:	d0cb      	beq.n	80016ae <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001716:	f7ff f9a3 	bl	8000a60 <HAL_GetTick>
 800171a:	1b40      	subs	r0, r0, r5
 800171c:	2802      	cmp	r0, #2
 800171e:	d9f5      	bls.n	800170c <HAL_RCC_OscConfig+0x1c0>
            return HAL_TIMEOUT;
 8001720:	2003      	movs	r0, #3
 8001722:	e11e      	b.n	8001962 <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001724:	4b29      	ldr	r3, [pc, #164]	@ (80017cc <HAL_RCC_OscConfig+0x280>)
 8001726:	2200      	movs	r2, #0
 8001728:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172c:	f7ff f998 	bl	8000a60 <HAL_GetTick>
 8001730:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001732:	4b25      	ldr	r3, [pc, #148]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 8001734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001736:	f013 0f02 	tst.w	r3, #2
 800173a:	d006      	beq.n	800174a <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800173c:	f7ff f990 	bl	8000a60 <HAL_GetTick>
 8001740:	1b40      	subs	r0, r0, r5
 8001742:	2802      	cmp	r0, #2
 8001744:	d9f5      	bls.n	8001732 <HAL_RCC_OscConfig+0x1e6>
        {
          return HAL_TIMEOUT;
 8001746:	2003      	movs	r0, #3
 8001748:	e10b      	b.n	8001962 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800174a:	6823      	ldr	r3, [r4, #0]
 800174c:	f013 0f04 	tst.w	r3, #4
 8001750:	d076      	beq.n	8001840 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001752:	4b1d      	ldr	r3, [pc, #116]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800175a:	d133      	bne.n	80017c4 <HAL_RCC_OscConfig+0x278>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800175c:	2300      	movs	r3, #0
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	4b19      	ldr	r3, [pc, #100]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 8001762:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001764:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001768:	641a      	str	r2, [r3, #64]	@ 0x40
 800176a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001770:	9301      	str	r3, [sp, #4]
 8001772:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001774:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001776:	4b16      	ldr	r3, [pc, #88]	@ (80017d0 <HAL_RCC_OscConfig+0x284>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800177e:	d029      	beq.n	80017d4 <HAL_RCC_OscConfig+0x288>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001780:	68a3      	ldr	r3, [r4, #8]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d03a      	beq.n	80017fc <HAL_RCC_OscConfig+0x2b0>
 8001786:	2b05      	cmp	r3, #5
 8001788:	d03e      	beq.n	8001808 <HAL_RCC_OscConfig+0x2bc>
 800178a:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 800178c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800178e:	f022 0201 	bic.w	r2, r2, #1
 8001792:	671a      	str	r2, [r3, #112]	@ 0x70
 8001794:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001796:	f022 0204 	bic.w	r2, r2, #4
 800179a:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800179c:	68a3      	ldr	r3, [r4, #8]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d03c      	beq.n	800181c <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a2:	f7ff f95d 	bl	8000a60 <HAL_GetTick>
 80017a6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a8:	4b07      	ldr	r3, [pc, #28]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 80017aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ac:	f013 0f02 	tst.w	r3, #2
 80017b0:	d145      	bne.n	800183e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b2:	f7ff f955 	bl	8000a60 <HAL_GetTick>
 80017b6:	1b80      	subs	r0, r0, r6
 80017b8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80017bc:	4298      	cmp	r0, r3
 80017be:	d9f3      	bls.n	80017a8 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
 80017c0:	2003      	movs	r0, #3
 80017c2:	e0ce      	b.n	8001962 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 80017c4:	2500      	movs	r5, #0
 80017c6:	e7d6      	b.n	8001776 <HAL_RCC_OscConfig+0x22a>
 80017c8:	40023800 	.word	0x40023800
 80017cc:	42470000 	.word	0x42470000
 80017d0:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017d4:	4a6b      	ldr	r2, [pc, #428]	@ (8001984 <HAL_RCC_OscConfig+0x438>)
 80017d6:	6813      	ldr	r3, [r2, #0]
 80017d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017dc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80017de:	f7ff f93f 	bl	8000a60 <HAL_GetTick>
 80017e2:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e4:	4b67      	ldr	r3, [pc, #412]	@ (8001984 <HAL_RCC_OscConfig+0x438>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80017ec:	d1c8      	bne.n	8001780 <HAL_RCC_OscConfig+0x234>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ee:	f7ff f937 	bl	8000a60 <HAL_GetTick>
 80017f2:	1b80      	subs	r0, r0, r6
 80017f4:	2802      	cmp	r0, #2
 80017f6:	d9f5      	bls.n	80017e4 <HAL_RCC_OscConfig+0x298>
          return HAL_TIMEOUT;
 80017f8:	2003      	movs	r0, #3
 80017fa:	e0b2      	b.n	8001962 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017fc:	4a62      	ldr	r2, [pc, #392]	@ (8001988 <HAL_RCC_OscConfig+0x43c>)
 80017fe:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6713      	str	r3, [r2, #112]	@ 0x70
 8001806:	e7c9      	b.n	800179c <HAL_RCC_OscConfig+0x250>
 8001808:	4b5f      	ldr	r3, [pc, #380]	@ (8001988 <HAL_RCC_OscConfig+0x43c>)
 800180a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800180c:	f042 0204 	orr.w	r2, r2, #4
 8001810:	671a      	str	r2, [r3, #112]	@ 0x70
 8001812:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001814:	f042 0201 	orr.w	r2, r2, #1
 8001818:	671a      	str	r2, [r3, #112]	@ 0x70
 800181a:	e7bf      	b.n	800179c <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181c:	f7ff f920 	bl	8000a60 <HAL_GetTick>
 8001820:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001822:	4b59      	ldr	r3, [pc, #356]	@ (8001988 <HAL_RCC_OscConfig+0x43c>)
 8001824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001826:	f013 0f02 	tst.w	r3, #2
 800182a:	d008      	beq.n	800183e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182c:	f7ff f918 	bl	8000a60 <HAL_GetTick>
 8001830:	1b80      	subs	r0, r0, r6
 8001832:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001836:	4298      	cmp	r0, r3
 8001838:	d9f3      	bls.n	8001822 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 800183a:	2003      	movs	r0, #3
 800183c:	e091      	b.n	8001962 <HAL_RCC_OscConfig+0x416>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800183e:	b9ed      	cbnz	r5, 800187c <HAL_RCC_OscConfig+0x330>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001840:	69a3      	ldr	r3, [r4, #24]
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 808c 	beq.w	8001960 <HAL_RCC_OscConfig+0x414>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001848:	4a4f      	ldr	r2, [pc, #316]	@ (8001988 <HAL_RCC_OscConfig+0x43c>)
 800184a:	6892      	ldr	r2, [r2, #8]
 800184c:	f002 020c 	and.w	r2, r2, #12
 8001850:	2a08      	cmp	r2, #8
 8001852:	d054      	beq.n	80018fe <HAL_RCC_OscConfig+0x3b2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001854:	2b02      	cmp	r3, #2
 8001856:	d017      	beq.n	8001888 <HAL_RCC_OscConfig+0x33c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001858:	4b4c      	ldr	r3, [pc, #304]	@ (800198c <HAL_RCC_OscConfig+0x440>)
 800185a:	2200      	movs	r2, #0
 800185c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185e:	f7ff f8ff 	bl	8000a60 <HAL_GetTick>
 8001862:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001864:	4b48      	ldr	r3, [pc, #288]	@ (8001988 <HAL_RCC_OscConfig+0x43c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800186c:	d045      	beq.n	80018fa <HAL_RCC_OscConfig+0x3ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186e:	f7ff f8f7 	bl	8000a60 <HAL_GetTick>
 8001872:	1b00      	subs	r0, r0, r4
 8001874:	2802      	cmp	r0, #2
 8001876:	d9f5      	bls.n	8001864 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8001878:	2003      	movs	r0, #3
 800187a:	e072      	b.n	8001962 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 800187c:	4a42      	ldr	r2, [pc, #264]	@ (8001988 <HAL_RCC_OscConfig+0x43c>)
 800187e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001880:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001884:	6413      	str	r3, [r2, #64]	@ 0x40
 8001886:	e7db      	b.n	8001840 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8001888:	4b40      	ldr	r3, [pc, #256]	@ (800198c <HAL_RCC_OscConfig+0x440>)
 800188a:	2200      	movs	r2, #0
 800188c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800188e:	f7ff f8e7 	bl	8000a60 <HAL_GetTick>
 8001892:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001894:	4b3c      	ldr	r3, [pc, #240]	@ (8001988 <HAL_RCC_OscConfig+0x43c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800189c:	d006      	beq.n	80018ac <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189e:	f7ff f8df 	bl	8000a60 <HAL_GetTick>
 80018a2:	1b40      	subs	r0, r0, r5
 80018a4:	2802      	cmp	r0, #2
 80018a6:	d9f5      	bls.n	8001894 <HAL_RCC_OscConfig+0x348>
            return HAL_TIMEOUT;
 80018a8:	2003      	movs	r0, #3
 80018aa:	e05a      	b.n	8001962 <HAL_RCC_OscConfig+0x416>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018ac:	69e3      	ldr	r3, [r4, #28]
 80018ae:	6a22      	ldr	r2, [r4, #32]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80018b4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80018b8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80018ba:	0852      	lsrs	r2, r2, #1
 80018bc:	3a01      	subs	r2, #1
 80018be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80018c2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80018c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80018c8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80018ca:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80018ce:	4a2e      	ldr	r2, [pc, #184]	@ (8001988 <HAL_RCC_OscConfig+0x43c>)
 80018d0:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80018d2:	4b2e      	ldr	r3, [pc, #184]	@ (800198c <HAL_RCC_OscConfig+0x440>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80018d8:	f7ff f8c2 	bl	8000a60 <HAL_GetTick>
 80018dc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018de:	4b2a      	ldr	r3, [pc, #168]	@ (8001988 <HAL_RCC_OscConfig+0x43c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80018e6:	d106      	bne.n	80018f6 <HAL_RCC_OscConfig+0x3aa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff f8ba 	bl	8000a60 <HAL_GetTick>
 80018ec:	1b00      	subs	r0, r0, r4
 80018ee:	2802      	cmp	r0, #2
 80018f0:	d9f5      	bls.n	80018de <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 80018f2:	2003      	movs	r0, #3
 80018f4:	e035      	b.n	8001962 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80018f6:	2000      	movs	r0, #0
 80018f8:	e033      	b.n	8001962 <HAL_RCC_OscConfig+0x416>
 80018fa:	2000      	movs	r0, #0
 80018fc:	e031      	b.n	8001962 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d031      	beq.n	8001966 <HAL_RCC_OscConfig+0x41a>
        pll_config = RCC->PLLCFGR;
 8001902:	4b21      	ldr	r3, [pc, #132]	@ (8001988 <HAL_RCC_OscConfig+0x43c>)
 8001904:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001906:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 800190a:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800190c:	4291      	cmp	r1, r2
 800190e:	d12c      	bne.n	800196a <HAL_RCC_OscConfig+0x41e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001910:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001914:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001916:	428a      	cmp	r2, r1
 8001918:	d129      	bne.n	800196e <HAL_RCC_OscConfig+0x422>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800191a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800191c:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8001920:	401a      	ands	r2, r3
 8001922:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001926:	d124      	bne.n	8001972 <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001928:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800192c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800192e:	0852      	lsrs	r2, r2, #1
 8001930:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001932:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001936:	d11e      	bne.n	8001976 <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001938:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800193c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800193e:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8001942:	d11a      	bne.n	800197a <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001944:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8001948:	6b22      	ldr	r2, [r4, #48]	@ 0x30
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800194a:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 800194e:	d116      	bne.n	800197e <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 8001950:	2000      	movs	r0, #0
 8001952:	e006      	b.n	8001962 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8001954:	2001      	movs	r0, #1
}
 8001956:	4770      	bx	lr
        return HAL_ERROR;
 8001958:	2001      	movs	r0, #1
 800195a:	e002      	b.n	8001962 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 800195c:	2001      	movs	r0, #1
 800195e:	e000      	b.n	8001962 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8001960:	2000      	movs	r0, #0
}
 8001962:	b002      	add	sp, #8
 8001964:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001966:	2001      	movs	r0, #1
 8001968:	e7fb      	b.n	8001962 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 800196a:	2001      	movs	r0, #1
 800196c:	e7f9      	b.n	8001962 <HAL_RCC_OscConfig+0x416>
 800196e:	2001      	movs	r0, #1
 8001970:	e7f7      	b.n	8001962 <HAL_RCC_OscConfig+0x416>
 8001972:	2001      	movs	r0, #1
 8001974:	e7f5      	b.n	8001962 <HAL_RCC_OscConfig+0x416>
 8001976:	2001      	movs	r0, #1
 8001978:	e7f3      	b.n	8001962 <HAL_RCC_OscConfig+0x416>
 800197a:	2001      	movs	r0, #1
 800197c:	e7f1      	b.n	8001962 <HAL_RCC_OscConfig+0x416>
 800197e:	2001      	movs	r0, #1
 8001980:	e7ef      	b.n	8001962 <HAL_RCC_OscConfig+0x416>
 8001982:	bf00      	nop
 8001984:	40007000 	.word	0x40007000
 8001988:	40023800 	.word	0x40023800
 800198c:	42470000 	.word	0x42470000

08001990 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001990:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001992:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001994:	6a02      	ldr	r2, [r0, #32]
 8001996:	f022 0201 	bic.w	r2, r2, #1
 800199a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800199c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800199e:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80019a0:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80019a4:	680c      	ldr	r4, [r1, #0]
 80019a6:	ea44 040c 	orr.w	r4, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80019aa:	f023 0c02 	bic.w	ip, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80019ae:	688b      	ldr	r3, [r1, #8]
 80019b0:	ea43 030c 	orr.w	r3, r3, ip

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80019b4:	4d11      	ldr	r5, [pc, #68]	@ (80019fc <TIM_OC1_SetConfig+0x6c>)
 80019b6:	42a8      	cmp	r0, r5
 80019b8:	d003      	beq.n	80019c2 <TIM_OC1_SetConfig+0x32>
 80019ba:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80019be:	42a8      	cmp	r0, r5
 80019c0:	d105      	bne.n	80019ce <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80019c2:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80019c6:	68cd      	ldr	r5, [r1, #12]
 80019c8:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80019ca:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80019ce:	4d0b      	ldr	r5, [pc, #44]	@ (80019fc <TIM_OC1_SetConfig+0x6c>)
 80019d0:	42a8      	cmp	r0, r5
 80019d2:	d003      	beq.n	80019dc <TIM_OC1_SetConfig+0x4c>
 80019d4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80019d8:	42a8      	cmp	r0, r5
 80019da:	d107      	bne.n	80019ec <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80019dc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80019e0:	694d      	ldr	r5, [r1, #20]
 80019e2:	ea45 0c02 	orr.w	ip, r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80019e6:	698a      	ldr	r2, [r1, #24]
 80019e8:	ea42 020c 	orr.w	r2, r2, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80019ec:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80019ee:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80019f0:	684a      	ldr	r2, [r1, #4]
 80019f2:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80019f4:	6203      	str	r3, [r0, #32]
}
 80019f6:	bc30      	pop	{r4, r5}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40010000 	.word	0x40010000

08001a00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001a00:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a02:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001a04:	6a02      	ldr	r2, [r0, #32]
 8001a06:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a0a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a0c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a0e:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001a10:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a14:	680c      	ldr	r4, [r1, #0]
 8001a16:	ea44 050c 	orr.w	r5, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001a1a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001a1e:	688c      	ldr	r4, [r1, #8]
 8001a20:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001a24:	4c11      	ldr	r4, [pc, #68]	@ (8001a6c <TIM_OC3_SetConfig+0x6c>)
 8001a26:	42a0      	cmp	r0, r4
 8001a28:	d003      	beq.n	8001a32 <TIM_OC3_SetConfig+0x32>
 8001a2a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001a2e:	42a0      	cmp	r0, r4
 8001a30:	d106      	bne.n	8001a40 <TIM_OC3_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001a32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001a36:	68cc      	ldr	r4, [r1, #12]
 8001a38:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001a3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a40:	4c0a      	ldr	r4, [pc, #40]	@ (8001a6c <TIM_OC3_SetConfig+0x6c>)
 8001a42:	42a0      	cmp	r0, r4
 8001a44:	d003      	beq.n	8001a4e <TIM_OC3_SetConfig+0x4e>
 8001a46:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001a4a:	42a0      	cmp	r0, r4
 8001a4c:	d107      	bne.n	8001a5e <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001a4e:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001a52:	694c      	ldr	r4, [r1, #20]
 8001a54:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001a58:	698c      	ldr	r4, [r1, #24]
 8001a5a:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a5e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001a60:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001a62:	684a      	ldr	r2, [r1, #4]
 8001a64:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a66:	6203      	str	r3, [r0, #32]
}
 8001a68:	bc30      	pop	{r4, r5}
 8001a6a:	4770      	bx	lr
 8001a6c:	40010000 	.word	0x40010000

08001a70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001a70:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a72:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001a74:	6a02      	ldr	r2, [r0, #32]
 8001a76:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a7a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a7c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a7e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001a80:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a84:	680d      	ldr	r5, [r1, #0]
 8001a86:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001a8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001a8e:	688d      	ldr	r5, [r1, #8]
 8001a90:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a94:	4d09      	ldr	r5, [pc, #36]	@ (8001abc <TIM_OC4_SetConfig+0x4c>)
 8001a96:	42a8      	cmp	r0, r5
 8001a98:	d003      	beq.n	8001aa2 <TIM_OC4_SetConfig+0x32>
 8001a9a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001a9e:	42a8      	cmp	r0, r5
 8001aa0:	d104      	bne.n	8001aac <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001aa2:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001aa6:	694d      	ldr	r5, [r1, #20]
 8001aa8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001aac:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001aae:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001ab0:	684a      	ldr	r2, [r1, #4]
 8001ab2:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ab4:	6203      	str	r3, [r0, #32]
}
 8001ab6:	bc30      	pop	{r4, r5}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40010000 	.word	0x40010000

08001ac0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ac0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ac2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ac4:	6a04      	ldr	r4, [r0, #32]
 8001ac6:	f024 0401 	bic.w	r4, r4, #1
 8001aca:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001acc:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ace:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ad2:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ad6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001ada:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001adc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001ade:	6203      	str	r3, [r0, #32]
}
 8001ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ae6:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001ae8:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001aea:	6a04      	ldr	r4, [r0, #32]
 8001aec:	f024 0410 	bic.w	r4, r4, #16
 8001af0:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001af2:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001af4:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001af8:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001afc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001b00:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001b04:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001b06:	6203      	str	r3, [r0, #32]
}
 8001b08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001b0e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b14:	430b      	orrs	r3, r1
 8001b16:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b1a:	6083      	str	r3, [r0, #8]
}
 8001b1c:	4770      	bx	lr

08001b1e <HAL_TIM_OC_MspInit>:
}
 8001b1e:	4770      	bx	lr

08001b20 <HAL_TIM_PWM_MspInit>:
}
 8001b20:	4770      	bx	lr
	...

08001b24 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001b24:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b26:	4a32      	ldr	r2, [pc, #200]	@ (8001bf0 <TIM_Base_SetConfig+0xcc>)
 8001b28:	4290      	cmp	r0, r2
 8001b2a:	d012      	beq.n	8001b52 <TIM_Base_SetConfig+0x2e>
 8001b2c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001b30:	d00f      	beq.n	8001b52 <TIM_Base_SetConfig+0x2e>
 8001b32:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001b36:	4290      	cmp	r0, r2
 8001b38:	d00b      	beq.n	8001b52 <TIM_Base_SetConfig+0x2e>
 8001b3a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001b3e:	4290      	cmp	r0, r2
 8001b40:	d007      	beq.n	8001b52 <TIM_Base_SetConfig+0x2e>
 8001b42:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001b46:	4290      	cmp	r0, r2
 8001b48:	d003      	beq.n	8001b52 <TIM_Base_SetConfig+0x2e>
 8001b4a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8001b4e:	4290      	cmp	r0, r2
 8001b50:	d103      	bne.n	8001b5a <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001b56:	684a      	ldr	r2, [r1, #4]
 8001b58:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b5a:	4a25      	ldr	r2, [pc, #148]	@ (8001bf0 <TIM_Base_SetConfig+0xcc>)
 8001b5c:	4290      	cmp	r0, r2
 8001b5e:	d02a      	beq.n	8001bb6 <TIM_Base_SetConfig+0x92>
 8001b60:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001b64:	d027      	beq.n	8001bb6 <TIM_Base_SetConfig+0x92>
 8001b66:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8001b6a:	4290      	cmp	r0, r2
 8001b6c:	d023      	beq.n	8001bb6 <TIM_Base_SetConfig+0x92>
 8001b6e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001b72:	4290      	cmp	r0, r2
 8001b74:	d01f      	beq.n	8001bb6 <TIM_Base_SetConfig+0x92>
 8001b76:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001b7a:	4290      	cmp	r0, r2
 8001b7c:	d01b      	beq.n	8001bb6 <TIM_Base_SetConfig+0x92>
 8001b7e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8001b82:	4290      	cmp	r0, r2
 8001b84:	d017      	beq.n	8001bb6 <TIM_Base_SetConfig+0x92>
 8001b86:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8001b8a:	4290      	cmp	r0, r2
 8001b8c:	d013      	beq.n	8001bb6 <TIM_Base_SetConfig+0x92>
 8001b8e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001b92:	4290      	cmp	r0, r2
 8001b94:	d00f      	beq.n	8001bb6 <TIM_Base_SetConfig+0x92>
 8001b96:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001b9a:	4290      	cmp	r0, r2
 8001b9c:	d00b      	beq.n	8001bb6 <TIM_Base_SetConfig+0x92>
 8001b9e:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8001ba2:	4290      	cmp	r0, r2
 8001ba4:	d007      	beq.n	8001bb6 <TIM_Base_SetConfig+0x92>
 8001ba6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001baa:	4290      	cmp	r0, r2
 8001bac:	d003      	beq.n	8001bb6 <TIM_Base_SetConfig+0x92>
 8001bae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001bb2:	4290      	cmp	r0, r2
 8001bb4:	d103      	bne.n	8001bbe <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bba:	68ca      	ldr	r2, [r1, #12]
 8001bbc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001bc2:	694a      	ldr	r2, [r1, #20]
 8001bc4:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bc6:	688a      	ldr	r2, [r1, #8]
 8001bc8:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001bca:	680a      	ldr	r2, [r1, #0]
 8001bcc:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bce:	4a08      	ldr	r2, [pc, #32]	@ (8001bf0 <TIM_Base_SetConfig+0xcc>)
 8001bd0:	4290      	cmp	r0, r2
 8001bd2:	d003      	beq.n	8001bdc <TIM_Base_SetConfig+0xb8>
 8001bd4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001bd8:	4290      	cmp	r0, r2
 8001bda:	d101      	bne.n	8001be0 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8001bdc:	690a      	ldr	r2, [r1, #16]
 8001bde:	6302      	str	r2, [r0, #48]	@ 0x30
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001be0:	6802      	ldr	r2, [r0, #0]
 8001be2:	f042 0204 	orr.w	r2, r2, #4
 8001be6:	6002      	str	r2, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8001be8:	2201      	movs	r2, #1
 8001bea:	6142      	str	r2, [r0, #20]
  TIMx->CR1 = tmpcr1;
 8001bec:	6003      	str	r3, [r0, #0]
}
 8001bee:	4770      	bx	lr
 8001bf0:	40010000 	.word	0x40010000

08001bf4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001bf4:	b340      	cbz	r0, 8001c48 <HAL_TIM_Base_Init+0x54>
{
 8001bf6:	b510      	push	{r4, lr}
 8001bf8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001bfa:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001bfe:	b1f3      	cbz	r3, 8001c3e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001c00:	2302      	movs	r3, #2
 8001c02:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c06:	4621      	mov	r1, r4
 8001c08:	f851 0b04 	ldr.w	r0, [r1], #4
 8001c0c:	f7ff ff8a 	bl	8001b24 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c10:	2301      	movs	r3, #1
 8001c12:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c16:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001c1a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001c1e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001c22:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c26:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001c2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001c2e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001c32:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001c36:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8001c3a:	2000      	movs	r0, #0
}
 8001c3c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001c3e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001c42:	f7ff fac7 	bl	80011d4 <HAL_TIM_Base_MspInit>
 8001c46:	e7db      	b.n	8001c00 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001c48:	2001      	movs	r0, #1
}
 8001c4a:	4770      	bx	lr

08001c4c <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8001c4c:	b340      	cbz	r0, 8001ca0 <HAL_TIM_OC_Init+0x54>
{
 8001c4e:	b510      	push	{r4, lr}
 8001c50:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001c52:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001c56:	b1f3      	cbz	r3, 8001c96 <HAL_TIM_OC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001c5e:	4621      	mov	r1, r4
 8001c60:	f851 0b04 	ldr.w	r0, [r1], #4
 8001c64:	f7ff ff5e 	bl	8001b24 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c6e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001c72:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001c76:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001c7a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c7e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001c82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001c86:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001c8a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001c8e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8001c92:	2000      	movs	r0, #0
}
 8001c94:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001c96:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 8001c9a:	f7ff ff40 	bl	8001b1e <HAL_TIM_OC_MspInit>
 8001c9e:	e7db      	b.n	8001c58 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8001ca0:	2001      	movs	r0, #1
}
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8001ca4:	b340      	cbz	r0, 8001cf8 <HAL_TIM_PWM_Init+0x54>
{
 8001ca6:	b510      	push	{r4, lr}
 8001ca8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001caa:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001cae:	b1f3      	cbz	r3, 8001cee <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cb6:	4621      	mov	r1, r4
 8001cb8:	f851 0b04 	ldr.w	r0, [r1], #4
 8001cbc:	f7ff ff32 	bl	8001b24 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001cca:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001cce:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001cd2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001cda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001cde:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001ce2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001ce6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8001cea:	2000      	movs	r0, #0
}
 8001cec:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001cee:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001cf2:	f7ff ff15 	bl	8001b20 <HAL_TIM_PWM_MspInit>
 8001cf6:	e7db      	b.n	8001cb0 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8001cf8:	2001      	movs	r0, #1
}
 8001cfa:	4770      	bx	lr

08001cfc <TIM_OC2_SetConfig>:
{
 8001cfc:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8001cfe:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d00:	6a02      	ldr	r2, [r0, #32]
 8001d02:	f022 0210 	bic.w	r2, r2, #16
 8001d06:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001d08:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001d0a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001d0c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d10:	680d      	ldr	r5, [r1, #0]
 8001d12:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8001d16:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001d1a:	688d      	ldr	r5, [r1, #8]
 8001d1c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001d20:	4d11      	ldr	r5, [pc, #68]	@ (8001d68 <TIM_OC2_SetConfig+0x6c>)
 8001d22:	42a8      	cmp	r0, r5
 8001d24:	d003      	beq.n	8001d2e <TIM_OC2_SetConfig+0x32>
 8001d26:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001d2a:	42a8      	cmp	r0, r5
 8001d2c:	d106      	bne.n	8001d3c <TIM_OC2_SetConfig+0x40>
    tmpccer &= ~TIM_CCER_CC2NP;
 8001d2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001d32:	68cd      	ldr	r5, [r1, #12]
 8001d34:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001d38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d3c:	4d0a      	ldr	r5, [pc, #40]	@ (8001d68 <TIM_OC2_SetConfig+0x6c>)
 8001d3e:	42a8      	cmp	r0, r5
 8001d40:	d003      	beq.n	8001d4a <TIM_OC2_SetConfig+0x4e>
 8001d42:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001d46:	42a8      	cmp	r0, r5
 8001d48:	d107      	bne.n	8001d5a <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001d4a:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001d4e:	694d      	ldr	r5, [r1, #20]
 8001d50:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001d54:	698d      	ldr	r5, [r1, #24]
 8001d56:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001d5a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001d5c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001d5e:	684a      	ldr	r2, [r1, #4]
 8001d60:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8001d62:	6203      	str	r3, [r0, #32]
}
 8001d64:	bc30      	pop	{r4, r5}
 8001d66:	4770      	bx	lr
 8001d68:	40010000 	.word	0x40010000

08001d6c <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8001d6c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d028      	beq.n	8001dc6 <HAL_TIM_OC_ConfigChannel+0x5a>
{
 8001d74:	b510      	push	{r4, lr}
 8001d76:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001d78:	2301      	movs	r3, #1
 8001d7a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8001d7e:	2a0c      	cmp	r2, #12
 8001d80:	d81c      	bhi.n	8001dbc <HAL_TIM_OC_ConfigChannel+0x50>
 8001d82:	e8df f002 	tbb	[pc, r2]
 8001d86:	1b07      	.short	0x1b07
 8001d88:	1b0c1b1b 	.word	0x1b0c1b1b
 8001d8c:	1b111b1b 	.word	0x1b111b1b
 8001d90:	1b1b      	.short	0x1b1b
 8001d92:	16          	.byte	0x16
 8001d93:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d94:	6800      	ldr	r0, [r0, #0]
 8001d96:	f7ff fdfb 	bl	8001990 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001d9a:	2000      	movs	r0, #0
      break;
 8001d9c:	e00f      	b.n	8001dbe <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d9e:	6800      	ldr	r0, [r0, #0]
 8001da0:	f7ff ffac 	bl	8001cfc <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001da4:	2000      	movs	r0, #0
      break;
 8001da6:	e00a      	b.n	8001dbe <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001da8:	6800      	ldr	r0, [r0, #0]
 8001daa:	f7ff fe29 	bl	8001a00 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001dae:	2000      	movs	r0, #0
      break;
 8001db0:	e005      	b.n	8001dbe <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001db2:	6800      	ldr	r0, [r0, #0]
 8001db4:	f7ff fe5c 	bl	8001a70 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001db8:	2000      	movs	r0, #0
      break;
 8001dba:	e000      	b.n	8001dbe <HAL_TIM_OC_ConfigChannel+0x52>
  switch (Channel)
 8001dbc:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001dc4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8001dc6:	2002      	movs	r0, #2
}
 8001dc8:	4770      	bx	lr

08001dca <HAL_TIM_PWM_ConfigChannel>:
{
 8001dca:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001dcc:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d066      	beq.n	8001ea2 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8001dd4:	4604      	mov	r4, r0
 8001dd6:	460d      	mov	r5, r1
 8001dd8:	2301      	movs	r3, #1
 8001dda:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8001dde:	2a0c      	cmp	r2, #12
 8001de0:	d85a      	bhi.n	8001e98 <HAL_TIM_PWM_ConfigChannel+0xce>
 8001de2:	e8df f002 	tbb	[pc, r2]
 8001de6:	5907      	.short	0x5907
 8001de8:	591b5959 	.word	0x591b5959
 8001dec:	59305959 	.word	0x59305959
 8001df0:	5959      	.short	0x5959
 8001df2:	44          	.byte	0x44
 8001df3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001df4:	6800      	ldr	r0, [r0, #0]
 8001df6:	f7ff fdcb 	bl	8001990 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001dfa:	6822      	ldr	r2, [r4, #0]
 8001dfc:	6993      	ldr	r3, [r2, #24]
 8001dfe:	f043 0308 	orr.w	r3, r3, #8
 8001e02:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e04:	6822      	ldr	r2, [r4, #0]
 8001e06:	6993      	ldr	r3, [r2, #24]
 8001e08:	f023 0304 	bic.w	r3, r3, #4
 8001e0c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e0e:	6822      	ldr	r2, [r4, #0]
 8001e10:	6993      	ldr	r3, [r2, #24]
 8001e12:	6929      	ldr	r1, [r5, #16]
 8001e14:	430b      	orrs	r3, r1
 8001e16:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001e18:	2000      	movs	r0, #0
      break;
 8001e1a:	e03e      	b.n	8001e9a <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e1c:	6800      	ldr	r0, [r0, #0]
 8001e1e:	f7ff ff6d 	bl	8001cfc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e22:	6822      	ldr	r2, [r4, #0]
 8001e24:	6993      	ldr	r3, [r2, #24]
 8001e26:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e2a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e2c:	6822      	ldr	r2, [r4, #0]
 8001e2e:	6993      	ldr	r3, [r2, #24]
 8001e30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001e34:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e36:	6822      	ldr	r2, [r4, #0]
 8001e38:	6993      	ldr	r3, [r2, #24]
 8001e3a:	6929      	ldr	r1, [r5, #16]
 8001e3c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001e40:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001e42:	2000      	movs	r0, #0
      break;
 8001e44:	e029      	b.n	8001e9a <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e46:	6800      	ldr	r0, [r0, #0]
 8001e48:	f7ff fdda 	bl	8001a00 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e4c:	6822      	ldr	r2, [r4, #0]
 8001e4e:	69d3      	ldr	r3, [r2, #28]
 8001e50:	f043 0308 	orr.w	r3, r3, #8
 8001e54:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e56:	6822      	ldr	r2, [r4, #0]
 8001e58:	69d3      	ldr	r3, [r2, #28]
 8001e5a:	f023 0304 	bic.w	r3, r3, #4
 8001e5e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e60:	6822      	ldr	r2, [r4, #0]
 8001e62:	69d3      	ldr	r3, [r2, #28]
 8001e64:	6929      	ldr	r1, [r5, #16]
 8001e66:	430b      	orrs	r3, r1
 8001e68:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001e6a:	2000      	movs	r0, #0
      break;
 8001e6c:	e015      	b.n	8001e9a <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e6e:	6800      	ldr	r0, [r0, #0]
 8001e70:	f7ff fdfe 	bl	8001a70 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e74:	6822      	ldr	r2, [r4, #0]
 8001e76:	69d3      	ldr	r3, [r2, #28]
 8001e78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e7c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e7e:	6822      	ldr	r2, [r4, #0]
 8001e80:	69d3      	ldr	r3, [r2, #28]
 8001e82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001e86:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e88:	6822      	ldr	r2, [r4, #0]
 8001e8a:	69d3      	ldr	r3, [r2, #28]
 8001e8c:	6929      	ldr	r1, [r5, #16]
 8001e8e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001e92:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001e94:	2000      	movs	r0, #0
      break;
 8001e96:	e000      	b.n	8001e9a <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8001e98:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001ea0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8001ea2:	2002      	movs	r0, #2
 8001ea4:	e7fc      	b.n	8001ea0 <HAL_TIM_PWM_ConfigChannel+0xd6>

08001ea6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001ea6:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001ea8:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001eaa:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001eae:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001eb8:	6082      	str	r2, [r0, #8]
}
 8001eba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001ec0:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d078      	beq.n	8001fba <HAL_TIM_ConfigClockSource+0xfa>
{
 8001ec8:	b510      	push	{r4, lr}
 8001eca:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001ecc:	2301      	movs	r3, #1
 8001ece:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001ed8:	6802      	ldr	r2, [r0, #0]
 8001eda:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001edc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001ee0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001ee4:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001ee6:	680b      	ldr	r3, [r1, #0]
 8001ee8:	2b60      	cmp	r3, #96	@ 0x60
 8001eea:	d04c      	beq.n	8001f86 <HAL_TIM_ConfigClockSource+0xc6>
 8001eec:	d823      	bhi.n	8001f36 <HAL_TIM_ConfigClockSource+0x76>
 8001eee:	2b40      	cmp	r3, #64	@ 0x40
 8001ef0:	d054      	beq.n	8001f9c <HAL_TIM_ConfigClockSource+0xdc>
 8001ef2:	d811      	bhi.n	8001f18 <HAL_TIM_ConfigClockSource+0x58>
 8001ef4:	2b20      	cmp	r3, #32
 8001ef6:	d003      	beq.n	8001f00 <HAL_TIM_ConfigClockSource+0x40>
 8001ef8:	d80a      	bhi.n	8001f10 <HAL_TIM_ConfigClockSource+0x50>
 8001efa:	b10b      	cbz	r3, 8001f00 <HAL_TIM_ConfigClockSource+0x40>
 8001efc:	2b10      	cmp	r3, #16
 8001efe:	d105      	bne.n	8001f0c <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f00:	4619      	mov	r1, r3
 8001f02:	6820      	ldr	r0, [r4, #0]
 8001f04:	f7ff fe03 	bl	8001b0e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001f08:	2000      	movs	r0, #0
      break;
 8001f0a:	e028      	b.n	8001f5e <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	e026      	b.n	8001f5e <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8001f10:	2b30      	cmp	r3, #48	@ 0x30
 8001f12:	d0f5      	beq.n	8001f00 <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 8001f14:	2001      	movs	r0, #1
 8001f16:	e022      	b.n	8001f5e <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8001f18:	2b50      	cmp	r3, #80	@ 0x50
 8001f1a:	d10a      	bne.n	8001f32 <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f1c:	68ca      	ldr	r2, [r1, #12]
 8001f1e:	6849      	ldr	r1, [r1, #4]
 8001f20:	6800      	ldr	r0, [r0, #0]
 8001f22:	f7ff fdcd 	bl	8001ac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f26:	2150      	movs	r1, #80	@ 0x50
 8001f28:	6820      	ldr	r0, [r4, #0]
 8001f2a:	f7ff fdf0 	bl	8001b0e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001f2e:	2000      	movs	r0, #0
      break;
 8001f30:	e015      	b.n	8001f5e <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8001f32:	2001      	movs	r0, #1
 8001f34:	e013      	b.n	8001f5e <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8001f36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f3a:	d03a      	beq.n	8001fb2 <HAL_TIM_ConfigClockSource+0xf2>
 8001f3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f40:	d014      	beq.n	8001f6c <HAL_TIM_ConfigClockSource+0xac>
 8001f42:	2b70      	cmp	r3, #112	@ 0x70
 8001f44:	d137      	bne.n	8001fb6 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8001f46:	68cb      	ldr	r3, [r1, #12]
 8001f48:	684a      	ldr	r2, [r1, #4]
 8001f4a:	6889      	ldr	r1, [r1, #8]
 8001f4c:	6800      	ldr	r0, [r0, #0]
 8001f4e:	f7ff ffaa 	bl	8001ea6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f52:	6822      	ldr	r2, [r4, #0]
 8001f54:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f56:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001f5a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001f5c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8001f64:	2300      	movs	r3, #0
 8001f66:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001f6a:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8001f6c:	68cb      	ldr	r3, [r1, #12]
 8001f6e:	684a      	ldr	r2, [r1, #4]
 8001f70:	6889      	ldr	r1, [r1, #8]
 8001f72:	6800      	ldr	r0, [r0, #0]
 8001f74:	f7ff ff97 	bl	8001ea6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f78:	6822      	ldr	r2, [r4, #0]
 8001f7a:	6893      	ldr	r3, [r2, #8]
 8001f7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f80:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001f82:	2000      	movs	r0, #0
      break;
 8001f84:	e7eb      	b.n	8001f5e <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f86:	68ca      	ldr	r2, [r1, #12]
 8001f88:	6849      	ldr	r1, [r1, #4]
 8001f8a:	6800      	ldr	r0, [r0, #0]
 8001f8c:	f7ff fdab 	bl	8001ae6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f90:	2160      	movs	r1, #96	@ 0x60
 8001f92:	6820      	ldr	r0, [r4, #0]
 8001f94:	f7ff fdbb 	bl	8001b0e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001f98:	2000      	movs	r0, #0
      break;
 8001f9a:	e7e0      	b.n	8001f5e <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f9c:	68ca      	ldr	r2, [r1, #12]
 8001f9e:	6849      	ldr	r1, [r1, #4]
 8001fa0:	6800      	ldr	r0, [r0, #0]
 8001fa2:	f7ff fd8d 	bl	8001ac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fa6:	2140      	movs	r1, #64	@ 0x40
 8001fa8:	6820      	ldr	r0, [r4, #0]
 8001faa:	f7ff fdb0 	bl	8001b0e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001fae:	2000      	movs	r0, #0
      break;
 8001fb0:	e7d5      	b.n	8001f5e <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	e7d3      	b.n	8001f5e <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	e7d1      	b.n	8001f5e <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8001fba:	2002      	movs	r0, #2
}
 8001fbc:	4770      	bx	lr

08001fbe <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001fbe:	f001 011f 	and.w	r1, r1, #31
 8001fc2:	f04f 0c01 	mov.w	ip, #1
 8001fc6:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001fca:	6a03      	ldr	r3, [r0, #32]
 8001fcc:	ea23 030c 	bic.w	r3, r3, ip
 8001fd0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001fd2:	6a03      	ldr	r3, [r0, #32]
 8001fd4:	408a      	lsls	r2, r1
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	6203      	str	r3, [r0, #32]
}
 8001fda:	4770      	bx	lr

08001fdc <HAL_TIM_OC_Start>:
{
 8001fdc:	b510      	push	{r4, lr}
 8001fde:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001fe0:	4608      	mov	r0, r1
 8001fe2:	2900      	cmp	r1, #0
 8001fe4:	d141      	bne.n	800206a <HAL_TIM_OC_Start+0x8e>
 8001fe6:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8001fea:	3b01      	subs	r3, #1
 8001fec:	bf18      	it	ne
 8001fee:	2301      	movne	r3, #1
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d16b      	bne.n	80020cc <HAL_TIM_OC_Start+0xf0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ff4:	2800      	cmp	r0, #0
 8001ff6:	d14e      	bne.n	8002096 <HAL_TIM_OC_Start+0xba>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ffe:	2201      	movs	r2, #1
 8002000:	4601      	mov	r1, r0
 8002002:	6820      	ldr	r0, [r4, #0]
 8002004:	f7ff ffdb 	bl	8001fbe <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002008:	6823      	ldr	r3, [r4, #0]
 800200a:	4a32      	ldr	r2, [pc, #200]	@ (80020d4 <HAL_TIM_OC_Start+0xf8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d003      	beq.n	8002018 <HAL_TIM_OC_Start+0x3c>
 8002010:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002014:	4293      	cmp	r3, r2
 8002016:	d103      	bne.n	8002020 <HAL_TIM_OC_Start+0x44>
    __HAL_TIM_MOE_ENABLE(htim);
 8002018:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800201a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800201e:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002020:	6823      	ldr	r3, [r4, #0]
 8002022:	4a2c      	ldr	r2, [pc, #176]	@ (80020d4 <HAL_TIM_OC_Start+0xf8>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d046      	beq.n	80020b6 <HAL_TIM_OC_Start+0xda>
 8002028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800202c:	d043      	beq.n	80020b6 <HAL_TIM_OC_Start+0xda>
 800202e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002032:	4293      	cmp	r3, r2
 8002034:	d03f      	beq.n	80020b6 <HAL_TIM_OC_Start+0xda>
 8002036:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800203a:	4293      	cmp	r3, r2
 800203c:	d03b      	beq.n	80020b6 <HAL_TIM_OC_Start+0xda>
 800203e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002042:	4293      	cmp	r3, r2
 8002044:	d037      	beq.n	80020b6 <HAL_TIM_OC_Start+0xda>
 8002046:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800204a:	4293      	cmp	r3, r2
 800204c:	d033      	beq.n	80020b6 <HAL_TIM_OC_Start+0xda>
 800204e:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002052:	4293      	cmp	r3, r2
 8002054:	d02f      	beq.n	80020b6 <HAL_TIM_OC_Start+0xda>
 8002056:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800205a:	4293      	cmp	r3, r2
 800205c:	d02b      	beq.n	80020b6 <HAL_TIM_OC_Start+0xda>
    __HAL_TIM_ENABLE(htim);
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	f042 0201 	orr.w	r2, r2, #1
 8002064:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002066:	2000      	movs	r0, #0
 8002068:	e02f      	b.n	80020ca <HAL_TIM_OC_Start+0xee>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800206a:	2904      	cmp	r1, #4
 800206c:	d007      	beq.n	800207e <HAL_TIM_OC_Start+0xa2>
 800206e:	2908      	cmp	r1, #8
 8002070:	d00b      	beq.n	800208a <HAL_TIM_OC_Start+0xae>
 8002072:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8002076:	3b01      	subs	r3, #1
 8002078:	bf18      	it	ne
 800207a:	2301      	movne	r3, #1
 800207c:	e7b8      	b.n	8001ff0 <HAL_TIM_OC_Start+0x14>
 800207e:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8002082:	3b01      	subs	r3, #1
 8002084:	bf18      	it	ne
 8002086:	2301      	movne	r3, #1
 8002088:	e7b2      	b.n	8001ff0 <HAL_TIM_OC_Start+0x14>
 800208a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800208e:	3b01      	subs	r3, #1
 8002090:	bf18      	it	ne
 8002092:	2301      	movne	r3, #1
 8002094:	e7ac      	b.n	8001ff0 <HAL_TIM_OC_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002096:	2804      	cmp	r0, #4
 8002098:	d005      	beq.n	80020a6 <HAL_TIM_OC_Start+0xca>
 800209a:	2808      	cmp	r0, #8
 800209c:	d007      	beq.n	80020ae <HAL_TIM_OC_Start+0xd2>
 800209e:	2302      	movs	r3, #2
 80020a0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80020a4:	e7ab      	b.n	8001ffe <HAL_TIM_OC_Start+0x22>
 80020a6:	2302      	movs	r3, #2
 80020a8:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80020ac:	e7a7      	b.n	8001ffe <HAL_TIM_OC_Start+0x22>
 80020ae:	2302      	movs	r3, #2
 80020b0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80020b4:	e7a3      	b.n	8001ffe <HAL_TIM_OC_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020bc:	2a06      	cmp	r2, #6
 80020be:	d007      	beq.n	80020d0 <HAL_TIM_OC_Start+0xf4>
      __HAL_TIM_ENABLE(htim);
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	f042 0201 	orr.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80020c8:	2000      	movs	r0, #0
}
 80020ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020cc:	2001      	movs	r0, #1
 80020ce:	e7fc      	b.n	80020ca <HAL_TIM_OC_Start+0xee>
  return HAL_OK;
 80020d0:	2000      	movs	r0, #0
 80020d2:	e7fa      	b.n	80020ca <HAL_TIM_OC_Start+0xee>
 80020d4:	40010000 	.word	0x40010000

080020d8 <HAL_TIM_PWM_Start>:
{
 80020d8:	b510      	push	{r4, lr}
 80020da:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020dc:	4608      	mov	r0, r1
 80020de:	2900      	cmp	r1, #0
 80020e0:	d141      	bne.n	8002166 <HAL_TIM_PWM_Start+0x8e>
 80020e2:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80020e6:	3b01      	subs	r3, #1
 80020e8:	bf18      	it	ne
 80020ea:	2301      	movne	r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d16b      	bne.n	80021c8 <HAL_TIM_PWM_Start+0xf0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020f0:	2800      	cmp	r0, #0
 80020f2:	d14e      	bne.n	8002192 <HAL_TIM_PWM_Start+0xba>
 80020f4:	2302      	movs	r3, #2
 80020f6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020fa:	2201      	movs	r2, #1
 80020fc:	4601      	mov	r1, r0
 80020fe:	6820      	ldr	r0, [r4, #0]
 8002100:	f7ff ff5d 	bl	8001fbe <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002104:	6823      	ldr	r3, [r4, #0]
 8002106:	4a32      	ldr	r2, [pc, #200]	@ (80021d0 <HAL_TIM_PWM_Start+0xf8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d003      	beq.n	8002114 <HAL_TIM_PWM_Start+0x3c>
 800210c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002110:	4293      	cmp	r3, r2
 8002112:	d103      	bne.n	800211c <HAL_TIM_PWM_Start+0x44>
    __HAL_TIM_MOE_ENABLE(htim);
 8002114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002116:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800211a:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800211c:	6823      	ldr	r3, [r4, #0]
 800211e:	4a2c      	ldr	r2, [pc, #176]	@ (80021d0 <HAL_TIM_PWM_Start+0xf8>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d046      	beq.n	80021b2 <HAL_TIM_PWM_Start+0xda>
 8002124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002128:	d043      	beq.n	80021b2 <HAL_TIM_PWM_Start+0xda>
 800212a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800212e:	4293      	cmp	r3, r2
 8002130:	d03f      	beq.n	80021b2 <HAL_TIM_PWM_Start+0xda>
 8002132:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002136:	4293      	cmp	r3, r2
 8002138:	d03b      	beq.n	80021b2 <HAL_TIM_PWM_Start+0xda>
 800213a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800213e:	4293      	cmp	r3, r2
 8002140:	d037      	beq.n	80021b2 <HAL_TIM_PWM_Start+0xda>
 8002142:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002146:	4293      	cmp	r3, r2
 8002148:	d033      	beq.n	80021b2 <HAL_TIM_PWM_Start+0xda>
 800214a:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800214e:	4293      	cmp	r3, r2
 8002150:	d02f      	beq.n	80021b2 <HAL_TIM_PWM_Start+0xda>
 8002152:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002156:	4293      	cmp	r3, r2
 8002158:	d02b      	beq.n	80021b2 <HAL_TIM_PWM_Start+0xda>
    __HAL_TIM_ENABLE(htim);
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	f042 0201 	orr.w	r2, r2, #1
 8002160:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002162:	2000      	movs	r0, #0
 8002164:	e02f      	b.n	80021c6 <HAL_TIM_PWM_Start+0xee>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002166:	2904      	cmp	r1, #4
 8002168:	d007      	beq.n	800217a <HAL_TIM_PWM_Start+0xa2>
 800216a:	2908      	cmp	r1, #8
 800216c:	d00b      	beq.n	8002186 <HAL_TIM_PWM_Start+0xae>
 800216e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8002172:	3b01      	subs	r3, #1
 8002174:	bf18      	it	ne
 8002176:	2301      	movne	r3, #1
 8002178:	e7b8      	b.n	80020ec <HAL_TIM_PWM_Start+0x14>
 800217a:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 800217e:	3b01      	subs	r3, #1
 8002180:	bf18      	it	ne
 8002182:	2301      	movne	r3, #1
 8002184:	e7b2      	b.n	80020ec <HAL_TIM_PWM_Start+0x14>
 8002186:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800218a:	3b01      	subs	r3, #1
 800218c:	bf18      	it	ne
 800218e:	2301      	movne	r3, #1
 8002190:	e7ac      	b.n	80020ec <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002192:	2804      	cmp	r0, #4
 8002194:	d005      	beq.n	80021a2 <HAL_TIM_PWM_Start+0xca>
 8002196:	2808      	cmp	r0, #8
 8002198:	d007      	beq.n	80021aa <HAL_TIM_PWM_Start+0xd2>
 800219a:	2302      	movs	r3, #2
 800219c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80021a0:	e7ab      	b.n	80020fa <HAL_TIM_PWM_Start+0x22>
 80021a2:	2302      	movs	r3, #2
 80021a4:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80021a8:	e7a7      	b.n	80020fa <HAL_TIM_PWM_Start+0x22>
 80021aa:	2302      	movs	r3, #2
 80021ac:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80021b0:	e7a3      	b.n	80020fa <HAL_TIM_PWM_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b8:	2a06      	cmp	r2, #6
 80021ba:	d007      	beq.n	80021cc <HAL_TIM_PWM_Start+0xf4>
      __HAL_TIM_ENABLE(htim);
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80021c4:	2000      	movs	r0, #0
}
 80021c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80021c8:	2001      	movs	r0, #1
 80021ca:	e7fc      	b.n	80021c6 <HAL_TIM_PWM_Start+0xee>
  return HAL_OK;
 80021cc:	2000      	movs	r0, #0
 80021ce:	e7fa      	b.n	80021c6 <HAL_TIM_PWM_Start+0xee>
 80021d0:	40010000 	.word	0x40010000

080021d4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021d4:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80021d8:	2a01      	cmp	r2, #1
 80021da:	d03d      	beq.n	8002258 <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 80021dc:	b410      	push	{r4}
 80021de:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80021e0:	2201      	movs	r2, #1
 80021e2:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e6:	2202      	movs	r2, #2
 80021e8:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021ec:	6802      	ldr	r2, [r0, #0]
 80021ee:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021f0:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021f2:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021f6:	6808      	ldr	r0, [r1, #0]
 80021f8:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021fc:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4816      	ldr	r0, [pc, #88]	@ (800225c <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8002202:	4282      	cmp	r2, r0
 8002204:	d01a      	beq.n	800223c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002206:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800220a:	d017      	beq.n	800223c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800220c:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8002210:	4282      	cmp	r2, r0
 8002212:	d013      	beq.n	800223c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002214:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002218:	4282      	cmp	r2, r0
 800221a:	d00f      	beq.n	800223c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800221c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002220:	4282      	cmp	r2, r0
 8002222:	d00b      	beq.n	800223c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002224:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8002228:	4282      	cmp	r2, r0
 800222a:	d007      	beq.n	800223c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 800222c:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8002230:	4282      	cmp	r2, r0
 8002232:	d003      	beq.n	800223c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002234:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8002238:	4282      	cmp	r2, r0
 800223a:	d104      	bne.n	8002246 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800223c:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002240:	6849      	ldr	r1, [r1, #4]
 8002242:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002244:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002246:	2201      	movs	r2, #1
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800224c:	2000      	movs	r0, #0
 800224e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8002252:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002256:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002258:	2002      	movs	r0, #2
}
 800225a:	4770      	bx	lr
 800225c:	40010000 	.word	0x40010000

08002260 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002260:	e7fe      	b.n	8002260 <NMI_Handler>

08002262 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002262:	e7fe      	b.n	8002262 <HardFault_Handler>

08002264 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002264:	e7fe      	b.n	8002264 <MemManage_Handler>

08002266 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002266:	e7fe      	b.n	8002266 <BusFault_Handler>

08002268 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002268:	e7fe      	b.n	8002268 <UsageFault_Handler>

0800226a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800226a:	4770      	bx	lr

0800226c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800226c:	4770      	bx	lr

0800226e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800226e:	4770      	bx	lr

08002270 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002270:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002272:	f7fe fbe9 	bl	8000a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002276:	bd08      	pop	{r3, pc}

08002278 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002278:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800227a:	4802      	ldr	r0, [pc, #8]	@ (8002284 <DMA1_Stream5_IRQHandler+0xc>)
 800227c:	f7fe fd9a 	bl	8000db4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002280:	bd08      	pop	{r3, pc}
 8002282:	bf00      	nop
 8002284:	20000c68 	.word	0x20000c68

08002288 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002288:	4a03      	ldr	r2, [pc, #12]	@ (8002298 <SystemInit+0x10>)
 800228a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800228e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002292:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002296:	4770      	bx	lr
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800229c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80022a0:	f7ff fff2 	bl	8002288 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022a4:	480c      	ldr	r0, [pc, #48]	@ (80022d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022a6:	490d      	ldr	r1, [pc, #52]	@ (80022dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022a8:	4a0d      	ldr	r2, [pc, #52]	@ (80022e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022ac:	e002      	b.n	80022b4 <LoopCopyDataInit>

080022ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022b2:	3304      	adds	r3, #4

080022b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b8:	d3f9      	bcc.n	80022ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ba:	4a0a      	ldr	r2, [pc, #40]	@ (80022e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022bc:	4c0a      	ldr	r4, [pc, #40]	@ (80022e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c0:	e001      	b.n	80022c6 <LoopFillZerobss>

080022c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c4:	3204      	adds	r2, #4

080022c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c8:	d3fb      	bcc.n	80022c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80022ca:	f000 f819 	bl	8002300 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ce:	f7fe fb3d 	bl	800094c <main>
  bx  lr    
 80022d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022dc:	20000c44 	.word	0x20000c44
  ldr r2, =_sidata
 80022e0:	080026d0 	.word	0x080026d0
  ldr r2, =_sbss
 80022e4:	20000c44 	.word	0x20000c44
  ldr r4, =_ebss
 80022e8:	20000d5c 	.word	0x20000d5c

080022ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022ec:	e7fe      	b.n	80022ec <ADC_IRQHandler>

080022ee <memset>:
 80022ee:	4402      	add	r2, r0
 80022f0:	4603      	mov	r3, r0
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d100      	bne.n	80022f8 <memset+0xa>
 80022f6:	4770      	bx	lr
 80022f8:	f803 1b01 	strb.w	r1, [r3], #1
 80022fc:	e7f9      	b.n	80022f2 <memset+0x4>
	...

08002300 <__libc_init_array>:
 8002300:	b570      	push	{r4, r5, r6, lr}
 8002302:	4b0d      	ldr	r3, [pc, #52]	@ (8002338 <__libc_init_array+0x38>)
 8002304:	4d0d      	ldr	r5, [pc, #52]	@ (800233c <__libc_init_array+0x3c>)
 8002306:	1b5b      	subs	r3, r3, r5
 8002308:	109c      	asrs	r4, r3, #2
 800230a:	2600      	movs	r6, #0
 800230c:	42a6      	cmp	r6, r4
 800230e:	d109      	bne.n	8002324 <__libc_init_array+0x24>
 8002310:	f000 f996 	bl	8002640 <_init>
 8002314:	4d0a      	ldr	r5, [pc, #40]	@ (8002340 <__libc_init_array+0x40>)
 8002316:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <__libc_init_array+0x44>)
 8002318:	1b5b      	subs	r3, r3, r5
 800231a:	109c      	asrs	r4, r3, #2
 800231c:	2600      	movs	r6, #0
 800231e:	42a6      	cmp	r6, r4
 8002320:	d105      	bne.n	800232e <__libc_init_array+0x2e>
 8002322:	bd70      	pop	{r4, r5, r6, pc}
 8002324:	f855 3b04 	ldr.w	r3, [r5], #4
 8002328:	4798      	blx	r3
 800232a:	3601      	adds	r6, #1
 800232c:	e7ee      	b.n	800230c <__libc_init_array+0xc>
 800232e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002332:	4798      	blx	r3
 8002334:	3601      	adds	r6, #1
 8002336:	e7f2      	b.n	800231e <__libc_init_array+0x1e>
 8002338:	080026c8 	.word	0x080026c8
 800233c:	080026c8 	.word	0x080026c8
 8002340:	080026c8 	.word	0x080026c8
 8002344:	080026cc 	.word	0x080026cc

08002348 <__udivmoddi4>:
 8002348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800234c:	9d08      	ldr	r5, [sp, #32]
 800234e:	460f      	mov	r7, r1
 8002350:	4604      	mov	r4, r0
 8002352:	468c      	mov	ip, r1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d148      	bne.n	80023ea <__udivmoddi4+0xa2>
 8002358:	428a      	cmp	r2, r1
 800235a:	4616      	mov	r6, r2
 800235c:	d961      	bls.n	8002422 <__udivmoddi4+0xda>
 800235e:	fab2 f382 	clz	r3, r2
 8002362:	b14b      	cbz	r3, 8002378 <__udivmoddi4+0x30>
 8002364:	f1c3 0220 	rsb	r2, r3, #32
 8002368:	fa01 fc03 	lsl.w	ip, r1, r3
 800236c:	fa20 f202 	lsr.w	r2, r0, r2
 8002370:	409e      	lsls	r6, r3
 8002372:	ea42 0c0c 	orr.w	ip, r2, ip
 8002376:	409c      	lsls	r4, r3
 8002378:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800237c:	b2b7      	uxth	r7, r6
 800237e:	fbbc f1fe 	udiv	r1, ip, lr
 8002382:	0c22      	lsrs	r2, r4, #16
 8002384:	fb0e cc11 	mls	ip, lr, r1, ip
 8002388:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800238c:	fb01 f007 	mul.w	r0, r1, r7
 8002390:	4290      	cmp	r0, r2
 8002392:	d909      	bls.n	80023a8 <__udivmoddi4+0x60>
 8002394:	18b2      	adds	r2, r6, r2
 8002396:	f101 3cff 	add.w	ip, r1, #4294967295
 800239a:	f080 80ee 	bcs.w	800257a <__udivmoddi4+0x232>
 800239e:	4290      	cmp	r0, r2
 80023a0:	f240 80eb 	bls.w	800257a <__udivmoddi4+0x232>
 80023a4:	3902      	subs	r1, #2
 80023a6:	4432      	add	r2, r6
 80023a8:	1a12      	subs	r2, r2, r0
 80023aa:	b2a4      	uxth	r4, r4
 80023ac:	fbb2 f0fe 	udiv	r0, r2, lr
 80023b0:	fb0e 2210 	mls	r2, lr, r0, r2
 80023b4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80023b8:	fb00 f707 	mul.w	r7, r0, r7
 80023bc:	42a7      	cmp	r7, r4
 80023be:	d909      	bls.n	80023d4 <__udivmoddi4+0x8c>
 80023c0:	1934      	adds	r4, r6, r4
 80023c2:	f100 32ff 	add.w	r2, r0, #4294967295
 80023c6:	f080 80da 	bcs.w	800257e <__udivmoddi4+0x236>
 80023ca:	42a7      	cmp	r7, r4
 80023cc:	f240 80d7 	bls.w	800257e <__udivmoddi4+0x236>
 80023d0:	4434      	add	r4, r6
 80023d2:	3802      	subs	r0, #2
 80023d4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80023d8:	1be4      	subs	r4, r4, r7
 80023da:	2100      	movs	r1, #0
 80023dc:	b11d      	cbz	r5, 80023e6 <__udivmoddi4+0x9e>
 80023de:	40dc      	lsrs	r4, r3
 80023e0:	2300      	movs	r3, #0
 80023e2:	e9c5 4300 	strd	r4, r3, [r5]
 80023e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023ea:	428b      	cmp	r3, r1
 80023ec:	d906      	bls.n	80023fc <__udivmoddi4+0xb4>
 80023ee:	b10d      	cbz	r5, 80023f4 <__udivmoddi4+0xac>
 80023f0:	e9c5 0100 	strd	r0, r1, [r5]
 80023f4:	2100      	movs	r1, #0
 80023f6:	4608      	mov	r0, r1
 80023f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023fc:	fab3 f183 	clz	r1, r3
 8002400:	2900      	cmp	r1, #0
 8002402:	d148      	bne.n	8002496 <__udivmoddi4+0x14e>
 8002404:	42bb      	cmp	r3, r7
 8002406:	d302      	bcc.n	800240e <__udivmoddi4+0xc6>
 8002408:	4282      	cmp	r2, r0
 800240a:	f200 8107 	bhi.w	800261c <__udivmoddi4+0x2d4>
 800240e:	1a84      	subs	r4, r0, r2
 8002410:	eb67 0203 	sbc.w	r2, r7, r3
 8002414:	2001      	movs	r0, #1
 8002416:	4694      	mov	ip, r2
 8002418:	2d00      	cmp	r5, #0
 800241a:	d0e4      	beq.n	80023e6 <__udivmoddi4+0x9e>
 800241c:	e9c5 4c00 	strd	r4, ip, [r5]
 8002420:	e7e1      	b.n	80023e6 <__udivmoddi4+0x9e>
 8002422:	2a00      	cmp	r2, #0
 8002424:	f000 8092 	beq.w	800254c <__udivmoddi4+0x204>
 8002428:	fab2 f382 	clz	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	f040 80a8 	bne.w	8002582 <__udivmoddi4+0x23a>
 8002432:	1a8a      	subs	r2, r1, r2
 8002434:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8002438:	fa1f fc86 	uxth.w	ip, r6
 800243c:	2101      	movs	r1, #1
 800243e:	0c20      	lsrs	r0, r4, #16
 8002440:	fbb2 f7fe 	udiv	r7, r2, lr
 8002444:	fb0e 2217 	mls	r2, lr, r7, r2
 8002448:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800244c:	fb0c f007 	mul.w	r0, ip, r7
 8002450:	4290      	cmp	r0, r2
 8002452:	d907      	bls.n	8002464 <__udivmoddi4+0x11c>
 8002454:	18b2      	adds	r2, r6, r2
 8002456:	f107 38ff 	add.w	r8, r7, #4294967295
 800245a:	d202      	bcs.n	8002462 <__udivmoddi4+0x11a>
 800245c:	4290      	cmp	r0, r2
 800245e:	f200 80e2 	bhi.w	8002626 <__udivmoddi4+0x2de>
 8002462:	4647      	mov	r7, r8
 8002464:	1a12      	subs	r2, r2, r0
 8002466:	b2a4      	uxth	r4, r4
 8002468:	fbb2 f0fe 	udiv	r0, r2, lr
 800246c:	fb0e 2210 	mls	r2, lr, r0, r2
 8002470:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8002474:	fb0c fc00 	mul.w	ip, ip, r0
 8002478:	45a4      	cmp	ip, r4
 800247a:	d907      	bls.n	800248c <__udivmoddi4+0x144>
 800247c:	1934      	adds	r4, r6, r4
 800247e:	f100 32ff 	add.w	r2, r0, #4294967295
 8002482:	d202      	bcs.n	800248a <__udivmoddi4+0x142>
 8002484:	45a4      	cmp	ip, r4
 8002486:	f200 80cb 	bhi.w	8002620 <__udivmoddi4+0x2d8>
 800248a:	4610      	mov	r0, r2
 800248c:	eba4 040c 	sub.w	r4, r4, ip
 8002490:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8002494:	e7a2      	b.n	80023dc <__udivmoddi4+0x94>
 8002496:	f1c1 0620 	rsb	r6, r1, #32
 800249a:	408b      	lsls	r3, r1
 800249c:	fa22 fc06 	lsr.w	ip, r2, r6
 80024a0:	ea4c 0c03 	orr.w	ip, ip, r3
 80024a4:	fa07 f401 	lsl.w	r4, r7, r1
 80024a8:	fa20 f306 	lsr.w	r3, r0, r6
 80024ac:	40f7      	lsrs	r7, r6
 80024ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80024b2:	4323      	orrs	r3, r4
 80024b4:	fa00 f801 	lsl.w	r8, r0, r1
 80024b8:	fa1f fe8c 	uxth.w	lr, ip
 80024bc:	fbb7 f0f9 	udiv	r0, r7, r9
 80024c0:	0c1c      	lsrs	r4, r3, #16
 80024c2:	fb09 7710 	mls	r7, r9, r0, r7
 80024c6:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 80024ca:	fb00 f70e 	mul.w	r7, r0, lr
 80024ce:	42a7      	cmp	r7, r4
 80024d0:	fa02 f201 	lsl.w	r2, r2, r1
 80024d4:	d90a      	bls.n	80024ec <__udivmoddi4+0x1a4>
 80024d6:	eb1c 0404 	adds.w	r4, ip, r4
 80024da:	f100 3aff 	add.w	sl, r0, #4294967295
 80024de:	f080 809b 	bcs.w	8002618 <__udivmoddi4+0x2d0>
 80024e2:	42a7      	cmp	r7, r4
 80024e4:	f240 8098 	bls.w	8002618 <__udivmoddi4+0x2d0>
 80024e8:	3802      	subs	r0, #2
 80024ea:	4464      	add	r4, ip
 80024ec:	1be4      	subs	r4, r4, r7
 80024ee:	b29f      	uxth	r7, r3
 80024f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80024f4:	fb09 4413 	mls	r4, r9, r3, r4
 80024f8:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 80024fc:	fb03 fe0e 	mul.w	lr, r3, lr
 8002500:	45a6      	cmp	lr, r4
 8002502:	d909      	bls.n	8002518 <__udivmoddi4+0x1d0>
 8002504:	eb1c 0404 	adds.w	r4, ip, r4
 8002508:	f103 37ff 	add.w	r7, r3, #4294967295
 800250c:	f080 8082 	bcs.w	8002614 <__udivmoddi4+0x2cc>
 8002510:	45a6      	cmp	lr, r4
 8002512:	d97f      	bls.n	8002614 <__udivmoddi4+0x2cc>
 8002514:	3b02      	subs	r3, #2
 8002516:	4464      	add	r4, ip
 8002518:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800251c:	eba4 040e 	sub.w	r4, r4, lr
 8002520:	fba0 e702 	umull	lr, r7, r0, r2
 8002524:	42bc      	cmp	r4, r7
 8002526:	4673      	mov	r3, lr
 8002528:	46b9      	mov	r9, r7
 800252a:	d363      	bcc.n	80025f4 <__udivmoddi4+0x2ac>
 800252c:	d060      	beq.n	80025f0 <__udivmoddi4+0x2a8>
 800252e:	b15d      	cbz	r5, 8002548 <__udivmoddi4+0x200>
 8002530:	ebb8 0203 	subs.w	r2, r8, r3
 8002534:	eb64 0409 	sbc.w	r4, r4, r9
 8002538:	fa04 f606 	lsl.w	r6, r4, r6
 800253c:	fa22 f301 	lsr.w	r3, r2, r1
 8002540:	431e      	orrs	r6, r3
 8002542:	40cc      	lsrs	r4, r1
 8002544:	e9c5 6400 	strd	r6, r4, [r5]
 8002548:	2100      	movs	r1, #0
 800254a:	e74c      	b.n	80023e6 <__udivmoddi4+0x9e>
 800254c:	0862      	lsrs	r2, r4, #1
 800254e:	0848      	lsrs	r0, r1, #1
 8002550:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 8002554:	0c0b      	lsrs	r3, r1, #16
 8002556:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800255a:	b28a      	uxth	r2, r1
 800255c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002560:	fbb3 f1f6 	udiv	r1, r3, r6
 8002564:	07e4      	lsls	r4, r4, #31
 8002566:	46b4      	mov	ip, r6
 8002568:	4637      	mov	r7, r6
 800256a:	46b6      	mov	lr, r6
 800256c:	231f      	movs	r3, #31
 800256e:	fbb0 f0f6 	udiv	r0, r0, r6
 8002572:	1bd2      	subs	r2, r2, r7
 8002574:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8002578:	e761      	b.n	800243e <__udivmoddi4+0xf6>
 800257a:	4661      	mov	r1, ip
 800257c:	e714      	b.n	80023a8 <__udivmoddi4+0x60>
 800257e:	4610      	mov	r0, r2
 8002580:	e728      	b.n	80023d4 <__udivmoddi4+0x8c>
 8002582:	f1c3 0120 	rsb	r1, r3, #32
 8002586:	fa20 f201 	lsr.w	r2, r0, r1
 800258a:	409e      	lsls	r6, r3
 800258c:	fa27 f101 	lsr.w	r1, r7, r1
 8002590:	409f      	lsls	r7, r3
 8002592:	433a      	orrs	r2, r7
 8002594:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8002598:	fa1f fc86 	uxth.w	ip, r6
 800259c:	fbb1 f7fe 	udiv	r7, r1, lr
 80025a0:	fb0e 1017 	mls	r0, lr, r7, r1
 80025a4:	0c11      	lsrs	r1, r2, #16
 80025a6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80025aa:	fb07 f80c 	mul.w	r8, r7, ip
 80025ae:	4588      	cmp	r8, r1
 80025b0:	fa04 f403 	lsl.w	r4, r4, r3
 80025b4:	d93a      	bls.n	800262c <__udivmoddi4+0x2e4>
 80025b6:	1871      	adds	r1, r6, r1
 80025b8:	f107 30ff 	add.w	r0, r7, #4294967295
 80025bc:	d201      	bcs.n	80025c2 <__udivmoddi4+0x27a>
 80025be:	4588      	cmp	r8, r1
 80025c0:	d81f      	bhi.n	8002602 <__udivmoddi4+0x2ba>
 80025c2:	eba1 0108 	sub.w	r1, r1, r8
 80025c6:	fbb1 f8fe 	udiv	r8, r1, lr
 80025ca:	fb08 f70c 	mul.w	r7, r8, ip
 80025ce:	fb0e 1118 	mls	r1, lr, r8, r1
 80025d2:	b292      	uxth	r2, r2
 80025d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80025d8:	42ba      	cmp	r2, r7
 80025da:	d22f      	bcs.n	800263c <__udivmoddi4+0x2f4>
 80025dc:	18b2      	adds	r2, r6, r2
 80025de:	f108 31ff 	add.w	r1, r8, #4294967295
 80025e2:	d2c6      	bcs.n	8002572 <__udivmoddi4+0x22a>
 80025e4:	42ba      	cmp	r2, r7
 80025e6:	d2c4      	bcs.n	8002572 <__udivmoddi4+0x22a>
 80025e8:	f1a8 0102 	sub.w	r1, r8, #2
 80025ec:	4432      	add	r2, r6
 80025ee:	e7c0      	b.n	8002572 <__udivmoddi4+0x22a>
 80025f0:	45f0      	cmp	r8, lr
 80025f2:	d29c      	bcs.n	800252e <__udivmoddi4+0x1e6>
 80025f4:	ebbe 0302 	subs.w	r3, lr, r2
 80025f8:	eb67 070c 	sbc.w	r7, r7, ip
 80025fc:	3801      	subs	r0, #1
 80025fe:	46b9      	mov	r9, r7
 8002600:	e795      	b.n	800252e <__udivmoddi4+0x1e6>
 8002602:	eba6 0808 	sub.w	r8, r6, r8
 8002606:	4441      	add	r1, r8
 8002608:	1eb8      	subs	r0, r7, #2
 800260a:	fbb1 f8fe 	udiv	r8, r1, lr
 800260e:	fb08 f70c 	mul.w	r7, r8, ip
 8002612:	e7dc      	b.n	80025ce <__udivmoddi4+0x286>
 8002614:	463b      	mov	r3, r7
 8002616:	e77f      	b.n	8002518 <__udivmoddi4+0x1d0>
 8002618:	4650      	mov	r0, sl
 800261a:	e767      	b.n	80024ec <__udivmoddi4+0x1a4>
 800261c:	4608      	mov	r0, r1
 800261e:	e6fb      	b.n	8002418 <__udivmoddi4+0xd0>
 8002620:	4434      	add	r4, r6
 8002622:	3802      	subs	r0, #2
 8002624:	e732      	b.n	800248c <__udivmoddi4+0x144>
 8002626:	3f02      	subs	r7, #2
 8002628:	4432      	add	r2, r6
 800262a:	e71b      	b.n	8002464 <__udivmoddi4+0x11c>
 800262c:	eba1 0108 	sub.w	r1, r1, r8
 8002630:	4638      	mov	r0, r7
 8002632:	fbb1 f8fe 	udiv	r8, r1, lr
 8002636:	fb08 f70c 	mul.w	r7, r8, ip
 800263a:	e7c8      	b.n	80025ce <__udivmoddi4+0x286>
 800263c:	4641      	mov	r1, r8
 800263e:	e798      	b.n	8002572 <__udivmoddi4+0x22a>

08002640 <_init>:
 8002640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002642:	bf00      	nop
 8002644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002646:	bc08      	pop	{r3}
 8002648:	469e      	mov	lr, r3
 800264a:	4770      	bx	lr

0800264c <_fini>:
 800264c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264e:	bf00      	nop
 8002650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002652:	bc08      	pop	{r3}
 8002654:	469e      	mov	lr, r3
 8002656:	4770      	bx	lr
